// Package template Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tmpl/file.tmpl
// tmpl/gk.json - 副本.tmpl
// tmpl/gk.json.tmpl
// tmpl/main_api.tmpl
// tmpl/main_svc.tmpl
// tmpl/partials/alias_type.tmpl
// tmpl/partials/constants.tmpl
// tmpl/partials/endpoint_func.tmpl
// tmpl/partials/func.tmpl
// tmpl/partials/func_parameters.tmpl
// tmpl/partials/func_results.tmpl
// tmpl/partials/func_return.tmpl
// tmpl/partials/imports.tmpl
// tmpl/partials/interface.tmpl
// tmpl/partials/interface_func.tmpl
// tmpl/partials/interface_stub.tmpl
// tmpl/partials/struct.tmpl
// tmpl/partials/struct_function.tmpl
// tmpl/partials/vars.tmpl
// tmpl/proto.pb.tmpl
// tmpl/proto_compile.bat.tmpl
// tmpl/proto_compile.sh.tmpl
// tmpl/svc.thrift.tmpl
// tmpl/thrift_compile.bat.tmpl
// tmpl/thrift_compile.sh.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplFileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\x84\x30\x10\x85\xef\x0b\xfb\x1f\x86\xe0\xa1\x85\x22\x3d\x17\x7a\x28\x7b\xda\x43\x4b\xa1\xa5\xd7\x65\x70\x47\x1b\xaa\xd1\x26\xb3\xc2\x32\xf8\xdf\x4b\x8c\xb6\x51\x54\x7a\x8b\xf3\x5e\xbe\xf7\x18\x23\xa2\x73\x30\x04\xe9\xa1\xae\x2a\x32\x0c\x4a\x75\x9d\xc8\xf8\xd9\x75\xfb\x9d\x08\x99\xb3\x3f\xec\x77\x0d\x66\x5f\x58\x10\x88\xa4\xaf\xe1\x18\xe6\x3d\xa5\x60\xb8\x29\xc9\x40\x7a\xac\x9a\xda\xb2\xbb\x85\xfb\x70\x9d\xa9\x6a\x4a\x64\x02\xa5\x83\xa2\x7e\x3d\x33\xfe\x94\x73\xa8\x8d\x63\x34\x8b\xa4\x6c\xd4\x54\xe4\xdb\xa4\x7d\xa0\x5d\x02\xb5\x68\x3d\xc3\xab\x9b\xd7\x9f\x4a\x8d\xee\xfd\xda\xd0\x02\x03\xbd\x76\xe2\x6b\x43\x2a\x32\x6e\xe2\x8e\x86\xc9\xe6\x98\xd1\x5f\x27\x8b\xa6\x20\x48\xf4\x5d\xd2\xc2\xc3\x63\x6c\xf1\x7f\x24\x5a\xe2\x38\x57\x90\xb4\x93\x90\xd5\xb4\x37\xb6\x97\x8c\xd7\xa3\x06\x7d\x9a\xe3\xfa\xe1\xff\x43\x9e\x89\x3f\xeb\xf3\x3c\x24\x4a\x19\x0c\x41\xd5\x39\xd0\x37\x24\xed\x90\x9d\xbe\x60\x45\xfd\xe3\x9b\xae\x36\xbf\x98\x2c\x54\x10\xa1\xd2\xd1\x5c\x0f\x25\x4f\xde\xc6\xba\x36\x6b\x6d\xa3\xd2\x3f\x01\x00\x00\xff\xff\x19\x28\x3f\x96\xf2\x02\x00\x00"

func tmplFileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplFileTmpl,
		"tmpl/file.tmpl",
	)
}

func tmplFileTmpl() (*asset, error) {
	bytes, err := tmplFileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/file.tmpl", size: 754, mode: os.FileMode(438), modTime: time.Unix(1561360772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x91\x4d\x6e\xc3\x20\x10\x85\xf7\x91\x72\x07\xc4\xba\xca\x01\xb2\xed\xbe\x1b\x1f\xc0\x19\xc3\xd8\x41\x31\x3f\x82\x49\xbb\x40\xdc\xbd\xc2\x35\x09\xa1\xad\x22\xb5\x0b\x2f\x61\xde\xcc\x7c\x6f\x5e\xdc\xef\x18\xe3\x01\xfd\xbb\x12\xc8\x8f\xcb\x93\x31\xee\x80\xce\xfc\xc8\x63\x3c\xc5\x48\xb6\x33\x70\xc1\x57\x08\xc8\x0e\xdd\x97\xf2\x0d\x34\xa6\x74\x4a\x29\xc6\x51\xcd\xd8\xa1\x03\x0f\x64\x7d\x4a\xee\x32\x7d\xfb\x7b\x3e\xa6\x00\xbc\xac\xfb\xf3\x80\xde\x80\x46\x7e\x2c\x70\x87\xc9\xde\xca\xca\x10\xfa\x11\xc4\x4d\xd3\x35\xfd\x81\xfc\x55\x50\xa9\x0e\x10\x94\x28\x92\xac\x48\x8b\x8e\x6b\x25\xe5\x8c\x1f\xe0\x2b\xe7\x6b\xcb\xbd\x94\xf7\x56\x3d\x68\xa4\xb3\xca\x50\xd8\xee\x58\x05\xe1\x97\x6b\x51\x43\x7c\x26\x72\xe4\xc1\x04\x67\x3d\x6d\x47\x7d\x47\xf8\x09\x3b\x43\xd6\x09\x13\x06\xea\x5b\x41\x9f\x7f\x1b\x77\x93\x77\xa2\x75\xb7\xb5\xb7\x07\x67\x19\xb0\x61\x76\xc3\xff\x41\x9f\xb7\xb8\xa1\xde\x29\xb4\x2c\xd9\x97\xad\x42\xcb\x3f\x8c\x5d\x23\x7a\xf0\xa8\x41\x99\xc6\xa3\xc4\x11\xae\x33\xf5\x55\x36\x4b\x86\x7c\xbf\x4b\x9f\x01\x00\x00\xff\xff\x2f\x9e\x9e\xfc\x75\x04\x00\x00"

func tmplGkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGkJsonTmpl,
		"tmpl/gk.json - 副本.tmpl",
	)
}

func tmplGkJsonTmpl() (*asset, error) {
	bytes, err := tmplGkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/gk.json - 副本.tmpl", size: 1141, mode: os.FileMode(438), modTime: time.Unix(1562055935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGkJsonTmpl2 = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\xcf\x6a\xc3\x30\x0c\xc6\xef\x85\xbe\x43\xf0\x79\xf4\x01\x7a\xdd\x7d\x97\x3c\x40\xaa\x38\x4a\x6a\x1a\xff\xc1\x56\x57\x86\xf1\xbb\x0f\xa7\x71\xea\x78\x1b\x1d\x8c\x91\xa3\xa5\x4f\xd2\xf7\xb3\xe4\xf7\xbb\xaa\x62\x0e\xed\xbb\xe0\xc8\x8e\xd3\xb3\xaa\x98\x01\x3a\xb3\x23\xf3\xfe\xe4\x3d\xe9\x5a\xc1\x05\x5f\xc1\x61\x75\xa8\xef\xca\x37\x90\x18\xc2\x29\x04\xef\x7b\x31\x62\x8d\x06\x2c\x90\xb6\x21\x98\xcb\xf0\x25\xf6\xbc\x4d\x32\xf0\x32\xcf\x8f\x0d\x1a\x05\x12\xd9\x31\x99\x3b\x0c\x7a\x49\x0b\x45\x68\x7b\xe0\x8b\xa6\x2e\xea\x1d\xd9\x2b\xa7\x94\x6d\xc1\x09\x9e\x24\x51\x11\x26\x1d\x93\xa2\xeb\x46\xbc\x81\xcd\xc8\xe7\x92\x47\x2a\xce\xcd\x6a\x50\x75\x46\x0b\x45\x6e\xbb\xcf\x4a\x16\x7e\xf8\x2d\x2a\x1c\x9f\x89\x0c\x59\x50\xce\x68\x4b\xdb\xb9\x7e\x58\xf8\xce\x76\x34\x99\x6f\x98\xd0\x51\x53\x0a\x9a\x18\x2d\xe8\x06\x6b\x78\x49\xb7\x35\xdb\x8a\x2c\x1a\x5c\xc8\x18\x1f\x05\xaa\x35\x59\x14\xdc\xc3\x05\x9a\x69\xff\xce\xf3\xbc\xc4\xb4\xf9\x4c\x2e\xbb\x74\x22\xbf\x9f\x3a\x6f\x6d\x85\x2d\x41\xa8\x72\x55\x40\x78\x83\x8f\x7f\xeb\xdf\x61\x0f\xd7\x91\x9a\xec\x1c\xa6\xb3\x61\xfb\x5d\xf8\x0c\x00\x00\xff\xff\x40\x23\xff\x04\xe8\x04\x00\x00"

func tmplGkJsonTmpl2Bytes() ([]byte, error) {
	return bindataRead(
		_tmplGkJsonTmpl2,
		"tmpl/gk.json.tmpl",
	)
}

func tmplGkJsonTmpl2() (*asset, error) {
	bytes, err := tmplGkJsonTmpl2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/gk.json.tmpl", size: 1256, mode: os.FileMode(438), modTime: time.Unix(1596615722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMain_apiTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\xcd\x8e\xdb\xc8\x11\x3e\x93\x4f\xd1\xdb\x40\x00\x52\xa0\x48\x8d\xb3\x6b\x6c\x26\x3b\x07\x67\x2c\xdb\x13\x68\x34\xc2\x48\x86\x81\xbd\x18\x3d\x64\x89\x6a\x98\xec\x66\x9a\x4d\x69\xc6\xf6\x00\xb9\x04\xf9\x01\x7c\x4c\x4e\x1b\x04\x7b\x0f\x92\x53\x2e\x01\x92\xa7\xc9\xae\x77\xdf\x22\xa8\x6a\x52\x7f\x33\x96\xbd\x06\x46\x6c\x56\x57\x57\x57\x57\x7d\xfd\x55\xd1\x95\x48\x5f\x89\x1c\x58\x29\xa4\xf2\x7d\x59\x56\xda\x58\x16\xf8\x1e\x9f\x17\x22\xe7\xf8\x2c\x2d\x3e\x14\xd8\x64\x61\x6d\xb5\x3d\x4e\xaa\xca\xe8\x39\x4a\x74\xed\x7e\x93\x5a\xe6\x4a\x14\xf8\x52\xdf\xd4\xa9\x28\x68\x68\x65\x09\xdc\xf7\x3d\x9e\x4b\xbb\x68\xae\xe2\x54\x97\x49\xae\x8d\x2c\x0a\x91\x94\xcd\x35\xf7\xbd\xda\x66\xaf\x65\xf5\x4a\x2a\xb6\xad\xa3\x2b\x50\x4e\x9c\xb8\x47\x3f\xd7\xdc\xf7\xdc\x18\x1d\xf8\xa8\x76\x62\x00\x0f\x04\x66\xed\xfb\xd6\x82\xca\xe8\x12\xec\x02\x9a\x3a\x49\x0b\x09\xca\xbe\xcc\x75\x21\x54\xbe\x3d\x81\x43\xb7\x74\xdf\xfd\xfe\x2b\x69\x13\xfc\x2b\x74\xce\x0f\x4d\x26\x05\x2c\xa1\xe0\x7e\xe8\xfb\x4b\x61\x30\xb6\x49\xf2\xfe\x8f\x7f\xf8\xfe\x9b\xbf\xfb\xde\x53\x69\x9f\x89\x7a\xc1\x18\x3b\x61\x7c\xac\x59\xf7\x3e\x31\x7a\x29\x33\xc8\xb8\xef\xfd\xaa\x91\x45\x36\x93\x25\xb4\x2a\x9b\xf7\x8d\x52\xd8\x59\xce\xb7\xec\x61\x02\xe3\xa9\x35\x52\xe5\x01\x6f\x0d\xf3\xa8\xdb\x22\x62\x28\x63\x0b\xd4\x4e\x75\x06\x4c\xcf\x99\x5d\xc8\x9a\x89\xaa\x62\x41\x0e\x0a\x8c\xb0\xc0\xb4\x62\x57\xb8\x61\xc8\x43\xdf\xbb\xda\x72\x65\xc7\xfa\xda\x27\x1e\x6d\xfc\x8b\x98\x93\x33\x4c\xff\x27\x98\x0f\x37\xe1\xf9\xfe\x9b\x77\xdf\xfd\xe9\xdb\x1f\x7f\xf7\xee\xfd\x7f\xfe\xe1\x7b\xcf\xac\xad\x1e\x65\x99\xb9\x73\x28\x4c\x4c\x5f\x64\x99\xe1\x11\xe3\xc7\x47\x83\xc1\x60\x80\x23\xd4\x85\xba\x66\x73\x6d\xd8\xb3\xd9\x6c\xc2\x82\x5f\x4f\x2f\xc6\x21\xab\xc1\x2c\xc1\xe0\x41\x1e\xc3\x55\x93\x93\xc9\x3d\x8b\x19\x4e\xec\x9a\x3c\xc2\x11\x2d\x60\x42\x65\xac\x04\x6b\x64\x5a\xb3\x42\xd6\x16\x14\x13\x6e\x2f\x34\x3a\xd2\xf9\x08\x33\x7d\xc7\xcd\x42\xe7\x7d\x87\x81\x88\xb9\x1d\x70\x30\x05\xcb\x0a\x9d\x33\x9a\x61\x01\xc9\xdf\x4a\x35\xd7\x6f\x57\xc2\xa8\xb7\x60\x8c\x36\x14\xf5\xe9\x32\x1d\x8b\x12\xee\xe6\xb4\x5e\xa6\x7d\x25\x28\xe8\x7c\x6e\xb4\xb2\xa2\x92\x38\xb6\x0b\x60\x28\x5f\xc7\x1c\x0f\x2e\x53\x60\x52\xad\x87\x99\xac\x53\xbd\x04\x73\x83\x3b\x24\xc9\x8f\xbf\x7f\xf7\xc3\x3f\xff\xec\x7b\x97\x60\xcd\xcd\xb9\xb8\x66\x6c\xb3\xdd\x99\xb2\x01\x37\x38\xd1\x2f\xc5\x35\x8f\xd8\x51\xc4\x78\x05\xa6\x6f\xe0\x37\x0d\xd4\x96\xe1\x9c\x84\x9a\x59\xcd\x32\x39\x9f\x83\x01\x65\x99\x54\xb5\x15\x2a\x05\x0a\x0d\x99\x45\x4c\xe8\xc6\x76\x66\x1f\x37\x46\x58\xa9\x55\x67\xdb\xba\x69\x1e\xb1\x9f\x0f\x7a\xf8\x12\x4f\x21\xd5\x2a\xdb\xdb\xac\x55\x8b\x98\x54\x69\xd1\x64\x52\xe5\xdd\xfe\xee\x24\x0e\x3a\xff\xfb\xef\x5f\x7f\xf8\xd7\x5f\x28\x76\x8f\xa1\xd4\xf7\x45\x2e\x83\x52\xbb\x84\xb8\x67\x17\x19\x8a\x1c\x42\x07\x27\xb6\x30\x93\x24\xdf\xfd\xed\xdf\xef\xbf\xfd\x6d\x67\xfa\x6b\xe2\x98\xfb\x40\xd4\xb2\x4f\x87\x22\x44\xe9\x71\xd2\x72\xd2\xf1\x2f\x3e\x3f\x3a\x4a\x44\x25\x93\xe5\x83\xa4\xae\x84\xaa\x51\x65\xa8\xc4\x55\x01\xcc\x99\x64\xd6\x88\x14\xcf\xb5\x94\x82\x89\x4e\x48\x40\x3e\xd5\x45\x01\xa9\xd5\x86\x81\xca\x2a\x2d\x95\x8d\xd8\xc7\xcc\xe3\xc5\xf2\xe7\x8d\x4a\x89\xe2\x83\x90\xbd\xf1\x3d\x72\x77\x22\x4c\x0d\x41\xe8\xe3\xd1\xd8\x48\xe7\x39\xee\x99\x69\xd4\x8a\x7d\xaf\xd0\x79\x0e\x86\x1d\x9f\xb8\x0b\x3a\xa2\xd7\x20\xec\x26\xe2\x91\xce\x03\x5e\xd6\x04\xe5\x05\x14\x05\xc5\x30\xbf\x87\x65\xae\xee\xe3\x86\xd0\xf7\x32\x98\x83\x61\xf7\x58\xcb\xb5\xce\xae\x6e\xe0\x27\xda\xa3\x53\x9c\x29\x0b\xc6\x34\x15\xf2\x9a\xca\x0a\x30\xb1\xef\x81\x31\x29\x1e\xa3\x14\xaf\x20\x48\x17\x42\x31\x77\xb5\x7c\x2f\xd7\x0c\xe3\xe2\x42\xe2\xed\x29\xe9\x3a\x9e\x52\x2d\x0b\x7d\xcf\x73\x55\x2d\x1e\x6b\x2b\xe7\x37\x41\x1a\xb1\xb6\xb8\xc5\xd3\xb3\xa7\x67\xe3\xd9\xce\xfb\x6c\x78\x79\x8e\x6b\x68\xdf\xaf\xfa\x6c\x5e\xda\x78\x88\x3b\xce\x03\xfe\x33\xcc\xf6\x57\xfd\x34\xf4\xbd\x5b\x8a\x3c\x32\x9e\xcb\xdc\xcc\x88\x14\x0c\xeb\xad\x2b\x61\xec\x24\xbe\x87\xce\xb5\xcc\x48\x56\xd9\xe6\x1f\x9d\x04\xc5\x0b\x5d\xdb\x09\x56\xee\xf6\xe2\xf2\x42\xa7\xa2\x40\xe9\xf1\x97\x03\x8e\x1a\x2d\xbc\xd7\x4c\xd2\x6b\x69\x05\xe7\x9a\x1a\xc6\x5a\x57\xad\x0b\x27\x2c\xe8\x6d\x83\xfb\x84\x71\xc4\xbf\xe7\x75\xb5\xb4\xdb\x64\x53\x87\xe3\x31\xac\x2e\xdb\xd9\xed\xc5\xb8\x0c\xff\x5c\xae\xbb\xf5\xf1\x69\xa1\x09\x79\x9e\xf7\x7a\x38\x89\xd8\x4b\x8c\xfc\xe6\xdc\x63\x58\x0d\x5b\x74\x07\x5b\x5e\x47\xac\x3b\x24\x65\x44\x94\x55\xe1\xf0\xb9\xb3\xf2\x5c\x67\x4d\xa1\xa7\x6e\x36\x38\x1a\xd0\x26\x5b\x01\x8e\x30\x66\x6c\x6f\x91\x9b\x0a\x3a\xff\xa2\xad\xd9\x17\xd2\x2e\x46\x18\xcb\xb5\x4b\xaf\x87\x93\x70\x5f\x63\x13\xbd\x60\x27\x96\x77\x14\x3b\xc7\x5a\xf7\x43\x74\x4f\xce\xc9\xa7\xcf\x4e\x98\x92\x05\x41\x71\xe7\x8e\x81\x41\x16\x01\x43\xc1\xf4\x74\x1d\x0f\xaf\xa5\x0d\x8e\xf0\xed\xd6\xad\xfe\x6c\x37\x7f\x77\x2c\x58\x92\xe3\x7d\x72\x99\xa1\x1a\x71\x53\xd1\x0d\x1b\x0b\x2b\x97\x34\x7a\x7e\x39\xe2\x11\xdb\x4b\xde\xad\xef\xd3\x5f\x92\xb0\x29\x31\x21\x33\xba\xb1\x50\xc7\xbe\x47\xb1\x2f\x9b\x6b\xca\x3d\x0a\x89\x1d\xde\xf8\xbe\xe7\x25\xc9\x1b\xfa\x25\xd8\x36\x35\x18\xac\x75\xf8\xec\x58\x2b\x9e\x82\x75\x1a\x72\xde\x29\x74\x99\xc1\x57\x6b\x84\xaa\x31\x19\xdb\x60\x38\xa5\x1e\x6d\x0a\x36\x40\xec\x3e\xaf\x31\x51\xbd\xae\x60\x75\xc3\x59\x57\x1e\x5c\x00\x22\xb6\x73\xbd\xc2\x5f\xee\x87\x3a\x49\x3c\xaf\x12\x4a\xa6\x01\x18\xe3\xee\x69\x40\x59\x49\x12\x0a\x6f\x92\x78\x26\x9e\x08\xbb\x98\x18\x98\xcb\xeb\x80\x27\xa2\xaa\x12\xf4\x91\x87\xf1\x33\x47\x32\x01\x5d\x01\x64\xff\x6a\x4b\x4b\x3a\xad\x88\x89\x34\x85\xba\x3e\xd5\xca\x1a\x5d\x04\x77\x8e\x87\xc4\xde\x19\x5a\x87\x42\xdb\x0e\xae\xbb\xe0\x75\xa7\x0a\xc3\xd6\xc5\xdb\x75\x76\xa8\x3c\x6c\xec\xee\x93\xdb\x1e\x1c\x9c\x16\x75\x36\xb8\x10\x9f\x6d\xb5\xea\x75\xcd\xd6\x36\x85\xd1\xf9\x46\xd4\xf0\x3c\x52\x19\x01\x21\x58\x2b\x46\xcc\xac\xe9\x2c\x49\x98\xeb\x94\x5c\x77\x44\xfc\x7b\x9f\x23\x08\x9d\x42\xe7\x74\x25\x82\x2e\x53\x1b\xc7\x36\x7d\x12\x7a\x51\xa2\x76\xc7\x32\xb4\xf9\x79\x73\x4d\xec\x51\xb6\x19\x08\x78\x42\xea\xee\x7b\x24\xe1\xae\x28\x76\xe9\x79\x82\xbb\xd3\x4c\x7c\xa6\x32\xb8\x0e\x0f\x2c\x4d\xcb\xac\x90\x0a\x3e\x6c\xe1\xd4\x29\x1c\xb2\x81\x3f\xb2\x38\x60\x63\xe2\x14\x0e\xd9\xa8\x6f\xca\x2b\x5d\x7c\xd8\xc4\x94\xe6\x0f\x59\xa0\x4b\xff\x61\x03\x04\xa8\xfd\xf5\x6d\x6f\xcb\x23\xd6\x7d\xf6\xac\x21\x1e\x62\x7a\x77\x60\xd4\x01\x66\xdd\x4b\x7f\x14\x31\x6b\xcd\x88\x95\x6b\xc8\xbc\x64\x27\x3b\x4d\x80\x05\x53\x4a\x25\x2c\x64\x54\x2a\xd1\x60\xe8\xdf\xb6\x1d\xcc\xee\x55\x5a\xec\x1c\x2e\xdc\x79\x43\xb0\x19\xb0\x8d\x51\x77\x23\x40\x70\x5c\x39\xf9\x25\xd4\x95\x56\x35\xbc\x30\x92\x98\xdf\xb0\x5e\x2b\xa7\x76\xd3\x81\x56\x14\x85\x5e\x5d\x18\x99\x4b\x85\x58\x34\xf1\x33\x10\x19\x98\xf8\x29\xd8\x80\x3b\x39\x6f\x99\x7c\x5b\x95\x2a\xa7\xa3\xe3\x1d\x31\xe3\x3d\xde\xb2\xf7\xaa\x35\x15\x84\x48\x89\x01\x7f\x44\x07\xec\xb7\x27\xec\x3f\xc2\x65\xfd\x76\x87\x68\xdb\x38\xa5\xe3\x93\x56\x9f\x83\x5d\xe8\x8c\xda\xcc\xa7\xc3\x59\x34\x79\x3e\x8b\x26\x17\xd3\x59\xf4\x78\x38\x1a\xce\x86\xd1\xc5\x64\x76\x76\x31\x9e\x92\xff\x9f\x64\xcf\xa9\x90\xbd\x47\x8d\x5d\x68\x23\x5f\x53\x1f\xcf\xc9\xa5\x45\x4c\xc9\x46\x56\x09\x56\x2d\x35\x6c\xf2\xb7\xd3\x4a\x12\x03\xb8\x17\x0c\x12\xd6\x8a\x96\x1d\x36\x13\xd4\x6e\xba\xaf\x2a\xa4\x0c\x1c\xc4\xe4\xc6\x99\x9a\x6b\xe4\x80\x7a\x25\x6d\xba\x60\xbd\xf5\xc7\xd7\x1b\xdf\x4b\x45\x0d\x1d\x81\x1c\x3b\xd4\xba\xb9\x1d\x0b\x84\x46\x34\xe1\xd4\xf1\xcb\xeb\x80\x76\xb7\x9f\x53\xc6\x2f\xb4\x03\xca\x2f\x84\x51\x1b\x65\x6a\xd2\x0e\x68\xb7\x45\x07\xa9\xbc\xa3\x47\xc7\x8e\x63\x58\x8d\x74\x3e\x2f\x6d\x1b\x31\x6c\x49\x6d\xa6\x1b\x1b\x6e\x2b\x92\xa1\x31\xac\x9e\xc8\x02\x6b\x70\xc7\xa6\xdd\x5e\xe1\x9e\xd1\x5d\xca\xad\x97\x29\xde\xe1\xb6\x17\x74\xba\x58\x42\xa7\x56\x94\x55\xc7\xd2\x28\xa8\x51\xf0\x44\x9b\x52\xd8\xa0\xa5\x73\xfa\x46\xa3\xff\x0d\x40\x88\xb7\x97\x8d\x84\x63\xbd\x0a\xc2\xf8\x4c\x05\xf4\xf6\x44\x5e\x43\xf6\xb5\x56\x10\xf0\xd3\xe9\x8c\x47\xec\xe1\xa0\xf7\x70\xd0\xfb\x12\xd9\xe7\x36\x62\xfc\xc1\x60\xf0\xb0\x3f\x38\xea\x0f\x1e\xcc\x8e\xbe\x38\x1e\x7c\x7e\x3c\xf8\x22\x1e\xd0\x3f\x7e\xd8\x79\x8b\x20\xdc\x76\xf8\xb0\x3a\x36\xe8\x54\x90\x71\xea\x31\xcc\x45\x53\xd8\x53\x92\x85\x6b\xae\x70\xca\xfe\xad\xff\xff\x00\x00\x00\xff\xff\x42\xd9\x28\xbe\x17\x13\x00\x00"

func tmplMain_apiTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMain_apiTmpl,
		"tmpl/main_api.tmpl",
	)
}

func tmplMain_apiTmpl() (*asset, error) {
	bytes, err := tmplMain_apiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/main_api.tmpl", size: 4887, mode: os.FileMode(438), modTime: time.Unix(1596545458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMain_svcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x18\x4b\x6f\xdc\xc6\xf9\x4c\xfe\x8a\x09\x81\xa2\x5c\x81\x22\x57\x6e\x62\xa4\x42\x74\xb0\x65\xd9\x16\x22\x6f\x05\xad\x82\x00\x29\x0a\x61\x44\x7e\xcb\x1d\x68\x38\xc3\xce\x0c\x77\x25\xcb\x02\x7a\x29\xfa\x00\x7c\x6c\x4f\x29\x8a\xdc\x8b\xf6\xd4\x4b\x81\xf6\xd7\x34\x71\xf2\x2f\x8a\x6f\x1e\xdc\x87\x56\xeb\x26\x87\x18\xb0\x76\x66\xbe\xe7\x7c\xf3\x3d\xd9\xd2\xf2\x8a\xd6\x40\x1a\xca\x44\x1c\xb3\xa6\x95\xca\x90\x34\x8e\x92\x09\xa7\x75\x82\xbf\x8d\xc1\x1f\x01\xe1\xa7\x98\x1a\xd3\x2e\xaf\x8b\xb6\x55\x72\x82\x27\x52\xbb\xbf\x85\x66\xb5\xa0\x1c\x37\xfa\x46\x97\x94\xdb\xa5\x61\x0d\x24\x71\x1c\x69\x53\xbd\x66\xed\x15\x13\x24\xa9\x99\x99\x76\x97\x79\x29\x9b\x42\xb6\x20\xdc\x71\xe1\x7e\x76\x6b\x99\xc4\x91\x5b\xa3\x98\xf7\x62\x17\x0a\x50\x7b\x50\x41\x43\x6d\xaa\x56\xc9\x06\xcc\x14\x3a\xbd\x42\xbe\x38\x2e\x4a\xce\x40\x98\x8b\x5a\x72\x2a\xea\x25\x00\x6a\xfc\xfd\x28\xec\x32\x18\xa7\x96\xb2\xe6\x90\x3b\xa4\x5c\xaa\xba\xa8\x55\x5b\x3e\x0c\x29\xae\x00\x5a\xca\xd9\xcc\x9a\x68\x59\x72\x2d\x77\xaf\x98\x29\xf0\x3f\x97\x75\xb2\x0d\x58\x70\x98\x01\x7f\x18\xa5\x01\xa3\x58\xb9\x7e\xb5\xfb\x08\x2b\x66\x18\xc4\xf1\x8c\x2a\xf4\x89\xa2\x78\xf7\x87\xdf\x7f\xf3\xe5\xdf\xe2\xe8\x05\x33\x2f\xa9\x9e\x12\x42\x0e\x48\x32\x92\x24\xec\x4f\x95\x9c\xb1\x0a\xaa\x24\x8e\x9e\x76\x8c\x57\xe7\xac\x01\x8f\xb2\xd8\x2f\x90\x06\x81\x73\xbd\xc4\x0f\x1d\x2f\x1f\x1b\xc5\x44\x9d\x26\x9e\x71\x92\x05\x11\x19\xc1\x33\x32\x45\xec\x52\x56\x40\xe4\x84\x98\x29\xd3\x84\xb6\x2d\x49\x6b\x10\xa0\xa8\x01\x22\x05\xb9\x44\x81\x83\x64\x10\x47\x97\x4b\xaa\xac\x70\xef\x75\x4a\xb2\x85\x7e\x19\x71\xe7\x04\xfd\xf5\xff\x60\xbf\x6c\x9f\x6f\xbe\x7c\xfb\xf5\x1f\xbf\xfa\xee\xb7\x6f\xdf\xfd\xfb\xef\x71\xf4\x42\xb5\xe5\x93\xaa\x52\xf7\x6e\x85\x0f\xbe\x4b\xab\x4a\x25\x19\x49\xf6\xf7\x86\xc3\xe1\x10\x57\xf5\xd9\xe9\x21\xe1\x4c\x1b\x10\x04\xa1\xa0\x35\xaa\xff\x0c\x2e\xbb\xda\xf2\x59\x63\x53\x21\x60\x95\xcf\x1e\xae\x2c\x01\xa1\xa2\x22\xfe\x3d\x37\x30\x3d\x91\xf5\x09\x3a\xcb\x3d\xdd\xb8\xac\x77\x9d\x1b\x65\xc4\x49\xc0\xc5\x18\x0c\xe1\xb2\x26\x16\x42\x52\x7b\xfe\x86\x89\x89\x7c\x33\xa7\x4a\xbc\x01\xa5\xa4\xb2\xb6\x1e\xcf\xca\x11\x6d\xe0\xfe\x4b\xea\x59\xb9\x2b\xa8\x35\x75\x32\x51\x52\x18\xda\x32\x5c\x9b\x29\x10\x3c\xef\x2d\xad\x41\xcd\x58\x09\x84\x89\x7e\x59\x31\x5d\xca\x19\xa8\x1b\x94\x50\x14\xdf\xfd\xee\xed\xb7\xff\xf8\x53\x1c\x9d\x81\x51\x37\xaf\xe8\x35\x21\x0b\x71\xc7\xc2\xa4\x89\x42\xc0\x6e\x43\xaf\x93\x8c\xec\x65\x24\x69\x41\xed\x2a\xf8\x75\x07\xda\x10\x84\x31\xd0\xc4\x48\x52\xb1\xc9\x04\x14\x08\x43\x98\xd0\x86\x8a\x12\xac\x69\x2c\x5b\xf4\x04\xd9\x99\xc0\xf6\x59\xa7\xa8\x61\x52\x04\xde\xc6\x81\x93\x8c\xfc\x6c\xb8\x83\x9b\x7c\x0c\xa5\x14\xd5\x9a\x30\x8f\x96\x11\x26\x4a\xde\x55\x4c\xd4\x41\xbe\xbb\x89\xf3\x97\xff\xfe\xe7\x2f\xdf\xfe\xf3\xcf\xd6\x76\xcf\xa0\x91\x9b\x2c\x57\x41\x23\xdd\x83\x34\x12\x1f\x7a\xcf\x3a\x4c\xb0\x8f\xb5\xdf\x44\x2a\x82\x60\x6b\x35\x50\x4e\xc0\xd7\x7f\xfd\xd7\xbb\xaf\x7e\x13\x04\x7c\x61\x53\xe5\x26\x57\xf2\x49\x34\xf8\x12\x66\xb1\xfd\xc2\xa7\xd6\xfd\x9f\x7f\xb8\xb7\x57\xd0\x96\x15\xb3\x47\x85\x6e\xa9\xd0\x88\x72\x24\xe8\x25\x07\xe2\x58\x12\xa3\x68\x89\xb7\x9b\x31\x4a\x68\x38\x7c\x79\x7e\x7e\x4a\x0e\x25\xe7\x50\x1a\xa9\x08\x88\xaa\x95\x4c\x98\x8c\xbc\x8f\xbd\x0d\xaa\x49\x27\x4a\x5b\x96\xd2\x01\xb9\x8d\x23\xab\xee\x29\x55\x1a\xd2\x41\x8c\x57\x23\x27\xb2\xae\x51\x66\x25\x11\x2b\x8f\x23\x2e\xeb\x1a\x14\xd9\x3f\x70\xc1\x79\x62\xb7\xe9\x20\x00\xf2\x13\x59\xa7\x49\xa3\xad\x43\x4f\x81\x73\x6b\xd1\x7a\x43\x86\xb9\xdc\x94\x17\x06\x71\x54\xc1\x04\x14\xd9\xc0\xad\x96\xb2\xba\xbc\x81\xef\xc9\x2f\x8e\x30\x71\x38\x2b\x9c\x2b\x5a\x82\x22\x3b\x7d\x71\xcc\xdd\x49\x1c\xdd\xc6\x51\xe4\x13\x4c\x14\x81\x52\x64\xf1\xcf\x86\x1d\x1e\x4f\xa5\x36\xa7\x58\xb9\x7d\x28\x24\x5c\x96\x94\xe3\xe9\xfe\xc7\xc3\x04\x31\xbc\xab\xf4\xb1\xb9\xe3\x03\x15\x61\x9d\x86\x91\x94\xad\x57\xe1\x80\xa4\x3b\xcb\x8e\x72\x40\x12\xf4\xa5\x28\x0a\xe5\x35\x08\x59\x94\xe6\x7c\x04\xf3\x33\x0f\x5d\x26\x46\x32\xfc\xef\xec\x16\xe8\xf3\x43\x2e\xed\x2b\x46\xd1\xeb\xa3\xd3\x8c\x5c\xe0\x8b\x2d\xee\x3d\x82\xf9\x91\xf7\x94\x74\x49\xeb\x8c\x84\x4b\x22\xa1\xa6\x4d\xcb\xdd\x5b\xaf\x50\xbe\x92\x55\xc7\xe5\xd8\x41\xd3\xbd\xa1\x15\xb2\x64\xe0\x0c\x6d\x46\xd6\x88\x1c\x28\x0d\xfa\x65\x4b\xd0\xcf\x99\x99\x9e\xa0\x2d\x7b\x95\x5e\x1f\x9d\x0e\xd6\x31\x16\xd6\x4b\x57\x6c\x79\x0f\x31\x28\xe6\xd5\x1f\xa0\x7a\x6c\x62\x75\xfa\xe0\x80\x08\xc6\xd1\xd3\xa3\xe8\x82\x1c\xac\x78\x19\x28\x8c\x4a\x50\xd6\xa0\x91\xd4\xf9\xd1\x35\x33\xe9\x1e\xee\xee\x1c\x87\x0f\x56\xdf\x70\x23\x17\x63\x61\xe8\xa3\xee\x85\x6c\xf6\xbd\x69\xad\xd7\x8e\xa8\xc1\xd6\x23\x23\xc9\x67\x67\x27\x49\x46\xd6\x1e\xf1\x2e\x8e\xee\x5c\xd0\x1d\x2a\xc0\x02\x88\x59\x3b\xd5\x2d\x86\xe3\xa0\xaf\x32\x73\xf8\x29\xe7\xa4\xd3\x36\x77\x23\x86\x7f\xbe\x9c\x9c\x4f\xe1\x26\x23\x46\xca\x8c\x50\x05\x96\x51\x05\x2d\x88\x0a\x44\x69\x93\xf1\x94\x1a\x32\x07\xd2\x52\x6d\x33\x73\x29\x9b\x56\x0a\x10\xc6\x83\x90\xa7\x99\x42\x93\xc7\x7d\x28\xf8\x14\x7b\x28\x3b\x81\x6e\xef\x75\xc8\xed\x1e\xc3\x26\x20\x9c\x50\x03\xa2\xbc\xe9\x11\x5e\x32\x6d\x64\xad\x68\x83\x7e\xe9\xb3\xba\x0f\xa7\x4d\x28\x13\x06\xbc\xfa\x14\x6e\xb4\x43\xf9\xe5\xaf\xb4\xcd\x98\x31\xfa\x35\x5a\xb9\x28\xc8\xd3\x4e\x33\x01\x5a\xfb\xe2\x18\xb8\xac\x10\x1f\xf4\x94\xb7\x09\x76\x56\xb2\x42\x5b\xdb\xf8\x4d\xee\xd6\x6f\x73\x40\x16\xfd\x17\xfa\xa7\xbf\xd3\x73\x25\x9b\x74\xa5\xa7\x0d\xb7\xfd\x45\x6b\xb4\x7d\x72\x0c\x14\xdd\xd2\x12\xf6\xfb\x00\xcf\xc2\xf9\xbe\xbb\x41\xe2\x45\x5d\x94\x48\x9b\x58\xf0\x4b\xe0\x6d\x00\x8f\xba\xe6\x12\x14\x56\x63\x8f\xa8\x89\x82\x12\xd8\x0c\xaa\xdc\x62\xdf\x65\xa4\xbf\xd7\xe0\xbe\x9d\xd7\x95\x1f\x77\x4d\x43\xd5\xcd\x06\xe5\x3d\xe4\x07\x29\xcf\x9d\xb4\x8b\x86\x95\x4a\x6a\x5b\x7a\xf5\xfd\xbb\x9c\x4b\x43\x39\xe9\x5f\x79\xf9\x4e\x4c\x90\x65\xda\x4d\x57\x73\xaf\x7b\xae\xa8\xd0\x76\x2a\xba\xf7\xbc\x3d\xe3\x1f\xe7\xce\x41\xdc\x85\xd8\x70\xd5\x33\xdf\x71\xf4\x3a\x31\x41\x04\x15\xf7\xee\xb7\xc9\x0d\x75\x57\x96\xd8\x16\xde\x0d\x30\xcc\x23\x9b\xd1\x9f\xc1\x84\x76\xdc\x8c\xb1\x97\x78\xd5\x5d\xe7\x2f\xa9\xa8\x38\xa4\x49\x3f\x43\x64\x24\x8c\x3b\x1e\xa6\xd2\x81\x2f\xcc\xc7\xe8\x93\xaa\x6b\xb1\x4d\xb7\x90\x3c\xc6\xc2\x55\x62\xb6\x6e\xe8\x15\xa4\xe5\x94\x0a\x57\xbc\x06\x71\x54\x4b\x82\xa5\xde\x55\xf9\x68\x0d\x49\xea\x7c\x6c\x67\x49\x9b\xf4\xed\x2a\x1f\x49\xc3\x26\x37\x69\x99\x11\x3f\x5c\xe6\xe3\xe3\x17\xc7\xa3\xf3\x95\xfd\xf9\xd1\xd9\x2b\xa4\xb1\x72\x3f\xd9\x25\x93\xc6\xe4\x47\x28\x71\x92\x26\x3f\x41\xed\x3f\xd9\x2d\xf1\xba\x69\x28\xc3\x97\x54\xb3\x72\xec\x1b\x2a\x3d\x2b\x43\xee\xf2\x47\x2e\xda\x57\x90\x0e\x96\xd1\x46\x30\x7f\xba\x04\x4c\x5d\xe2\x1d\x6c\xa5\xf1\x0d\xcc\x2b\x56\x55\x1c\xe6\x54\xf5\x54\xe9\x32\xcd\x76\x1e\xc7\x42\x1b\xd5\x35\x20\xcc\x2a\xa7\xe5\x84\x92\x91\xd5\x18\xbd\xc7\xdf\xe7\x76\x3b\x7f\x98\xe0\xef\xf9\xfa\xd3\x2c\xda\x2b\x2e\x6b\x5b\xce\xbc\xbe\x58\x47\x02\x55\x98\x63\x12\x1b\x3f\x5c\xb8\x82\xbb\x7f\x40\x04\x98\xfc\xc4\x8e\x21\x69\x62\xca\x16\x6b\x4c\x98\x8f\x1e\xa8\x82\xe1\xe9\x40\x29\xd7\x7e\x98\x4e\x09\x5f\xf2\x42\x2f\xa9\x6d\x07\x30\x2b\xc3\x1e\xdf\x61\xe5\x76\x19\x09\x3a\x86\xc8\xc8\x56\x3a\x2e\x94\x8d\xe3\x98\xf7\x61\xcf\x6e\x61\x84\x11\xcc\x5f\x9c\x9d\x1e\xda\x38\x50\x69\x2f\x76\x95\x49\x10\x82\xcc\xae\x28\xf2\xe8\xa7\xf9\xdc\x51\x9e\x52\x45\x1b\x30\xa0\xf4\x2d\xaa\x6f\xd5\x46\xb1\x36\x5b\x38\xde\x76\xfb\x69\xa0\xb3\x04\x3a\xbd\xa2\xb6\x47\xd0\xb3\xb2\xbd\xcc\xcf\xa0\x46\x03\xaa\xcf\x34\x28\x4f\xa4\x33\xb2\xa4\xbd\xb5\xf9\x7a\xd9\xf7\x3d\xfd\x8a\xb5\x83\x69\xb5\x53\x2f\xe5\xa2\x8f\x85\xa2\x20\x6e\x7e\x74\x33\xa3\x0d\xde\x1f\xe8\x07\x6e\x7a\x44\x79\x0d\x62\x87\x4e\x31\xe4\x14\xdb\x01\x36\x8b\xcc\x62\xd1\xdd\xc7\xa4\x22\x71\x43\x42\x48\x2d\xcf\x51\xba\x85\xe4\xc7\xa2\x82\xeb\xc1\x16\xd2\xb2\xa9\x38\x13\xf0\x30\x87\x43\x87\xb0\x8d\x07\xfe\x61\x7c\x0b\x8f\x53\x87\xb0\x8d\x87\xbe\x69\x2e\x25\x7f\x98\xc5\xd8\xc2\xb7\x71\xb0\x0d\xdb\xc3\x0c\xac\xef\xad\xd3\xbf\x2f\x3d\x3f\xe8\x1e\xfd\x57\x86\x65\xff\xb0\xf4\x2e\x6a\x9f\x88\xca\xf9\xca\x02\x33\x23\x4d\xef\x36\xf7\x9a\x4d\x50\x0d\x13\xd4\x40\x65\x73\x2d\x32\x1c\xc4\x77\x7e\xaa\x5b\x19\xcf\xac\x17\xb9\x0d\xba\x17\xe6\x62\xef\x61\x0b\x80\x1d\xe1\xdc\xf7\x0a\x74\x3b\x5c\xe4\x4f\x38\x97\xf3\x63\x31\x91\xe8\x47\x7a\xce\x4c\x39\x25\x3b\xfd\x67\x8d\xdb\x38\x2a\xa9\x86\xe0\x84\xfb\xce\x6f\x1d\x6c\x85\x83\xbd\x0d\xb2\x70\xe8\x4c\x4c\xe4\x16\xec\x20\xcf\x21\xcf\xa9\x12\x5b\x90\x3f\xa7\x4a\x2c\x90\x5d\xb3\xf7\x30\xb6\xad\x4e\xa9\x2b\xc1\xde\x00\x2e\xc2\x46\x30\x3f\x91\xf5\xa4\x31\xde\x62\x58\x13\x4d\x25\x3b\x33\x58\x46\xb4\x8c\x46\x30\x7f\xce\x38\x4e\x61\x21\x22\x83\xac\xc1\x1a\xd3\xd5\xb0\xd5\xb3\x12\x7d\xc0\x77\x20\x0e\x17\x67\xd4\xb1\xa1\x4d\x1b\x22\x1d\x0f\x34\x1e\x3c\x97\xaa\xa1\x26\xf5\x29\xc1\x7e\xfd\xb0\x5f\xd7\x6e\xe3\x90\xa5\xdd\xe1\x48\xce\xd3\x41\x7e\x2c\x52\xbb\x7b\xce\xae\xa1\xfa\x42\x0a\x48\x93\xc3\xf1\x79\x92\x91\xc7\xc3\x9d\xc7\xc3\x9d\x8f\xd1\x83\xef\x32\x92\x3c\x1a\x0e\x1f\xef\x0e\xf7\x76\x87\x8f\xce\xf7\x3e\xda\x1f\x7e\xb8\x3f\xfc\x28\x1f\xda\x7f\xc9\x76\xe5\x0d\x7a\xfb\xb2\xc2\xdb\xd1\xb1\x43\xb0\x63\x10\x82\x7c\x9b\x73\x68\xcf\x06\x71\x50\xdf\x21\xc7\x77\xf1\xff\x02\x00\x00\xff\xff\xff\x43\x8f\xb8\x1f\x17\x00\x00"

func tmplMain_svcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMain_svcTmpl,
		"tmpl/main_svc.tmpl",
	)
}

func tmplMain_svcTmpl() (*asset, error) {
	bytes, err := tmplMain_svcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/main_svc.tmpl", size: 5919, mode: os.FileMode(438), modTime: time.Unix(1596545458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsAlias_typeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\x2a\xa9\x2c\x48\x55\xa8\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x85\xb0\x43\x2a\x0b\x52\xc1\x3a\x52\xf3\x52\x10\x34\x20\x00\x00\xff\xff\xa0\x3f\x01\xa9\x55\x00\x00\x00"

func tmplPartialsAlias_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsAlias_typeTmpl,
		"tmpl/partials/alias_type.tmpl",
	)
}

func tmplPartialsAlias_typeTmpl() (*asset, error) {
	bytes, err := tmplPartialsAlias_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/alias_type.tmpl", size: 85, mode: os.FileMode(438), modTime: time.Unix(1561361816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsConstantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x4d\xce\xcf\x2b\x2e\x51\xd0\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x2a\x65\x7a\x1e\x89\xc5\x61\x89\x39\xa5\xa9\xb5\xb5\xb6\x10\x69\x28\xaf\xba\x3a\x35\x2f\xa5\xb6\x16\x64\x26\x98\xa1\x09\x67\x01\x02\x00\x00\xff\xff\x10\xb6\xd9\xd5\x81\x00\x00\x00"

func tmplPartialsConstantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsConstantsTmpl,
		"tmpl/partials/constants.tmpl",
	)
}

func tmplPartialsConstantsTmpl() (*asset, error) {
	bytes, err := tmplPartialsConstantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/constants.tmpl", size: 129, mode: os.FileMode(438), modTime: time.Unix(1562060282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsEndpoint_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x6b\xc3\x30\x14\x84\xf7\x42\xff\xc3\x0d\x1e\x6c\x10\xa2\x73\x20\x53\xa0\x63\x87\x40\xbb\x16\xe1\xbe\x04\x81\x2a\xbb\x92\x6c\x02\x8f\xf7\xdf\x8b\x2c\xdb\xa4\xf6\x90\xa1\x5e\x8c\xc4\x71\xf7\xdd\xe9\xf9\x09\x00\x02\xa5\x21\x78\x5c\x06\xdf\xd6\x6d\xba\xa1\xed\x7c\xa2\x5b\xd2\xa7\xf2\x57\x00\xb3\xbd\xe0\x9a\x50\x3b\xf2\xd0\x67\xfa\x19\x28\x26\xfd\x61\x42\x6c\xf0\x22\x12\xca\x05\x33\xb9\x48\x22\x9f\xcc\xe4\xbf\x44\x60\x7d\xa2\x70\x31\x2d\xb1\x34\xa8\xef\x4e\x0a\x14\x42\x17\x1a\x70\x21\x58\xbe\xc7\x39\x38\x1c\x31\xc7\xe9\x9a\x79\xd5\xbc\x99\x6f\x12\x69\xb6\x76\x13\x07\x73\x30\xfe\x4a\xa8\xac\xaa\xc6\x6c\xa0\x4f\xc6\x39\xeb\xaf\xfa\x4c\x71\x70\x29\x66\x49\x35\xce\x1e\x13\x83\xef\x32\x84\x89\x09\x95\x45\xb5\xd5\x37\x22\x6a\xf5\x2e\x55\x0f\x47\xc4\xb1\xd5\xcc\xab\xb6\xb8\xe5\x41\xd5\x1e\xe0\xbe\x9a\x48\x6e\xa4\x1f\x20\xfc\x19\x63\x97\xbf\x29\x3e\xbf\xe8\xb4\x4f\xec\x3b\x1f\x69\x71\xc6\x8e\x65\xd7\x2e\x9b\xa6\xee\xbd\xef\x29\xbc\xda\x90\xf3\x17\xae\xc3\xbf\x67\x12\x05\x6f\x5d\x81\x95\xdf\x00\x00\x00\xff\xff\x32\x8c\x9b\xf7\x7e\x02\x00\x00"

func tmplPartialsEndpoint_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_funcTmpl,
		"tmpl/partials/endpoint_func.tmpl",
	)
}

func tmplPartialsEndpoint_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_func.tmpl", size: 638, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFuncTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x51\xca\x83\x40\x0c\x84\xdf\x05\xef\x30\xe4\x49\x5f\x96\xff\x0c\x7f\x6f\xd0\x0b\x88\x68\x2c\xc2\x1a\x5b\xcd\x3e\x94\x90\xbb\x97\xdd\x6d\x0b\x7d\x9b\x49\x86\x6f\xc6\x6c\x5d\x20\x8c\x70\xd9\xb7\x8d\x45\x41\xe4\x6e\xf6\xb1\x59\xb3\xcc\xee\x4b\x92\x09\x66\xca\xdb\x3d\x8e\xca\xa0\x55\x94\x8f\x65\x9c\x78\xc8\x2f\x42\x70\x87\xa1\xe2\x76\x45\xc7\x0f\x84\xff\x7d\x7e\x82\xa8\x2f\xc4\x6c\x0a\x2e\x9e\xec\xde\x36\x25\x7a\x53\x74\x91\x05\xe1\xca\x67\x8a\x7a\xf6\xf8\x73\x3f\x58\xd3\x21\x3f\x6d\xb9\x63\xa8\x77\xfa\x86\x2b\xa5\xcc\x03\xde\xa2\x6d\xfc\x15\x00\x00\xff\xff\xf4\xd8\xe7\x8c\xd3\x00\x00\x00"

func tmplPartialsFuncTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFuncTmpl,
		"tmpl/partials/func.tmpl",
	)
}

func tmplPartialsFuncTmpl() (*asset, error) {
	bytes, err := tmplPartialsFuncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func.tmpl", size: 211, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_parametersTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x25\x0a\x1a\x39\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\x05\x08\x00\x00\xff\xff\x15\x5b\x78\xe8\x50\x00\x00\x00"

func tmplPartialsFunc_parametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_parametersTmpl,
		"tmpl/partials/func_parameters.tmpl",
	)
}

func tmplPartialsFunc_parametersTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_parametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_parameters.tmpl", size: 80, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_resultsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xd5\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x20\xfd\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\xa5\x09\xa5\x01\x01\x00\x00\xff\xff\xcc\x6e\x26\x22\x6c\x00\x00\x00"

func tmplPartialsFunc_resultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_resultsTmpl,
		"tmpl/partials/func_results.tmpl",
	)
}

func tmplPartialsFunc_resultsTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_resultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_results.tmpl", size: 108, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_returnTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\x05\x31\x33\xd3\x14\xf2\xf2\x4b\x14\x34\x72\x12\x8b\x4b\x14\x54\x32\x15\x54\x34\x6b\x6b\x75\xaa\xab\x53\xf3\x52\x40\xb2\x60\x0a\x10\x00\x00\xff\xff\xbc\x66\xba\xd5\x44\x00\x00\x00"

func tmplPartialsFunc_returnTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_returnTmpl,
		"tmpl/partials/func_return.tmpl",
	)
}

func tmplPartialsFunc_returnTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_returnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_return.tmpl", size: 68, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsImportsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x50\xa9\xad\xcd\xcc\x2d\xc8\x2f\x2a\xd1\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x05\x49\x82\x15\xe5\xe5\x97\x28\x68\xa4\x16\x2a\xa8\x94\xe9\xf9\x25\xe6\xa6\x2a\x28\x29\x69\x82\x64\xa0\xdc\xda\x5a\x85\xea\xea\xd4\xbc\x14\xa8\x50\x48\x65\x41\x6a\x6d\x2d\xc8\x34\xb0\x18\x2f\x97\x26\x94\x05\x08\x00\x00\xff\xff\x47\x50\xa7\x81\x70\x00\x00\x00"

func tmplPartialsImportsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsImportsTmpl,
		"tmpl/partials/imports.tmpl",
	)
}

func tmplPartialsImportsTmpl() (*asset, error) {
	bytes, err := tmplPartialsImportsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/imports.tmpl", size: 112, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterfaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\xca\xc2\x30\x10\xc5\xf1\x7d\xa1\x77\x78\x84\x2c\x3f\x72\x80\x0f\x5c\xb9\xd6\x2b\x48\x68\x5f\x34\x60\xa6\xa5\x8e\x05\x19\xe6\xee\x12\x41\x77\xef\x2d\x7e\x7f\xb3\x5a\x20\x44\x3a\x2e\xad\x51\x14\x21\xb8\x9b\x7d\x6f\xdf\x94\xd9\x5d\x5f\x2b\x61\x96\xce\xb9\xd1\x1d\x55\x94\x5b\xc9\x13\x61\xe3\x60\xb6\x65\xb9\x12\xb1\xfe\xc5\x1d\xff\x07\xa4\x13\xf5\xb6\xcc\x8f\xae\x95\x6d\xbd\x67\x25\xc2\xcf\x5c\xca\x53\xa6\x80\xb8\xbb\x77\xfc\xe9\x8f\x83\xbf\x03\x00\x00\xff\xff\x55\x08\xe2\x86\x8b\x00\x00\x00"

func tmplPartialsInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterfaceTmpl,
		"tmpl/partials/interface.tmpl",
	)
}

func tmplPartialsInterfaceTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface.tmpl", size: 139, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x2b\xcd\x4b\x8e\x2f\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\x56\x52\xd0\x0b\x80\x73\x6a\x6b\x35\x31\x94\x16\xa5\x16\x97\xe6\x94\x80\xd4\x05\x41\x58\xb5\xb5\x80\x00\x00\x00\xff\xff\xc1\x2e\xd4\xb5\x59\x00\x00\x00"

func tmplPartialsInterface_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_funcTmpl,
		"tmpl/partials/interface_func.tmpl",
	)
}

func tmplPartialsInterface_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_func.tmpl", size: 89, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_stubTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x2e\x29\x2a\x4d\x2e\x51\x52\xd0\xab\xad\xe5\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\xd4\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x45\xd5\x55\x9a\x14\x9f\x56\x9a\x97\x5c\x92\x99\x9f\xa7\xa4\xa0\x52\x06\xd2\x0d\xd2\x9f\x9a\x97\x52\x5b\x0b\x08\x00\x00\xff\xff\xb3\x9e\x14\xdc\x60\x00\x00\x00"

func tmplPartialsInterface_stubTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_stubTmpl,
		"tmpl/partials/interface_stub.tmpl",
	)
}

func tmplPartialsInterface_stubTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_stubTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_stub.tmpl", size: 96, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStructTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xb1\x0a\xc2\x30\x18\x04\xe0\x5d\xf0\x1d\x8e\x92\x51\xf2\x00\x82\x93\xbb\x93\xb8\x07\xfd\x2d\x1d\x12\x4b\xfa\x5b\x28\xc7\xbd\xbb\x10\x09\xdd\xbe\x83\xbb\x23\xa7\x37\x8a\x21\x5e\x3f\x39\x5b\x71\x0c\x83\x44\xf6\x28\x1d\x0f\xa4\x95\x97\xe4\xdb\x6c\x20\xe3\x2d\x65\x93\xb0\x78\xfd\x3e\x1d\x04\x59\x53\x19\x0d\x61\x3a\x85\x15\xe7\x0b\xe2\x23\xd5\xe5\x3f\x0c\x6b\xaf\x37\xdf\xb7\x79\x77\x1a\x1b\xdb\x37\xf4\x0b\x00\x00\xff\xff\x55\xe9\x71\x95\x88\x00\x00\x00"

func tmplPartialsStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStructTmpl,
		"tmpl/partials/struct.tmpl",
	)
}

func tmplPartialsStructTmpl() (*asset, error) {
	bytes, err := tmplPartialsStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct.tmpl", size: 136, mode: os.FileMode(438), modTime: time.Unix(1566802589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStruct_functionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcf\xcd\x4a\xc7\x30\x10\x04\xf0\xbb\xe0\x3b\x0c\x39\xb5\x97\xe0\x33\xe8\xdd\x83\x7a\x2f\xa5\xdd\x48\x21\x49\x6b\xba\x39\x94\x65\xde\x5d\x62\xfd\x7f\x9d\x92\x19\x76\xf9\xb1\x66\x4b\x40\x16\xf8\xb7\x35\x25\xc9\x0a\xe7\x48\xb3\x4b\x24\x9f\x9f\xcc\x24\xcf\x64\xa8\x79\x42\x67\xe6\x3f\xb5\xd4\x49\xfd\xfb\x98\x84\xc4\xad\xf8\x3a\x36\x21\x7b\x98\xa9\xa4\x2d\x8e\x2a\x70\x4b\x56\x29\x61\x9c\x64\x68\xeb\x0e\x9e\x34\x9c\xe6\xaa\xe8\xe4\x07\xfe\x75\x9d\x0f\x38\xd7\xff\xb1\x2d\xb4\x8f\xc4\x5d\x4e\x7b\x09\xf8\x56\x74\x51\x32\xfc\x87\xec\x35\xea\xde\xe3\x85\x2c\xa2\xb5\xe4\x07\xac\x11\xc3\xd9\xbb\xeb\xf0\xdd\x05\xff\x0f\xf8\x1b\x00\x00\xff\xff\x25\x63\x5f\x34\xf5\x00\x00\x00"

func tmplPartialsStruct_functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_functionTmpl,
		"tmpl/partials/struct_function.tmpl",
	)
}

func tmplPartialsStruct_functionTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_function.tmpl", size: 245, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsVarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x2d\x4b\x2c\x52\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\x78\xb9\x34\xa1\x2c\x40\x00\x00\x00\xff\xff\x51\x62\x20\x15\x7e\x00\x00\x00"

func tmplPartialsVarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsVarsTmpl,
		"tmpl/partials/vars.tmpl",
	)
}

func tmplPartialsVarsTmpl() (*asset, error) {
	bytes, err := tmplPartialsVarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/vars.tmpl", size: 126, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProtoPbTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\xfb\x30\x0c\xc5\xef\x85\x7e\x07\x51\x0c\xfd\x17\x42\x2e\xff\xdb\x4a\x4e\x85\xc1\x0e\xdd\xc6\x3a\x7a\x19\x3b\x98\x54\xeb\x42\x1b\x3b\xb3\xdc\xd0\x20\xf4\xdd\x47\xec\x2c\x75\xb7\x9e\x22\xc5\x4f\xef\xfd\x64\x53\x67\xbc\x3e\x43\x01\xb3\xc6\x59\x6f\xff\xcf\x96\xd3\xc9\x74\xd2\xe8\xf2\xa0\xf7\x08\xcc\xde\x6e\x8c\x3e\xe0\x4a\x13\x42\xfe\x1c\x7f\x3f\xea\x1a\x45\x82\x90\xd9\x69\xb3\x47\x50\x75\xa6\x0c\xdc\x15\x90\x3f\xd4\x8d\x75\x9e\x44\xaa\x50\xc0\x8c\x59\x99\xfc\xbe\x3a\xa2\x09\x63\x7d\x00\x33\x9a\x9d\xc8\x6d\x83\xa7\xc6\x57\xd6\x90\x88\x0d\x05\x84\xf9\x18\x09\x45\xec\x56\xd6\x90\xd7\xc6\xe7\x1b\x7b\x72\x65\x64\x49\x3c\x09\x5d\x5b\x95\x3d\x7d\xbe\x89\xe5\x30\xce\x49\x5e\x95\xa9\x36\xe4\xad\xd1\x7f\xda\x1d\x89\x00\x00\xb8\xa6\xec\x23\xda\x9f\xc0\x7f\x49\xf3\x82\x5f\x0b\x70\xe8\x4f\xce\xd0\xaf\x03\x5a\x00\xcb\xc8\x10\x20\x6e\xad\xb6\x46\x22\xbd\x47\xea\x15\x75\xac\xaf\xd6\x4b\xf9\x0e\x03\x9f\x32\xf9\x56\xbb\x01\x2f\xb2\xbd\x76\x4d\x50\x27\x9c\x45\xec\xb6\xfa\x78\x42\x11\xe6\xea\x03\x54\x7b\xb9\xca\xb7\xd1\xf6\x9c\xa9\x2e\xd8\x26\xa7\x51\x7e\x16\xc9\x60\xd8\x80\x59\x75\x17\xeb\x79\x68\xff\x5c\xfa\x7c\x10\xbf\x0f\xdf\xe5\xf8\x04\x72\xf5\x1c\xdf\x01\x00\x00\xff\xff\x19\x19\x06\x4e\x63\x02\x00\x00"

func tmplProtoPbTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProtoPbTmpl,
		"tmpl/proto.pb.tmpl",
	)
}

func tmplProtoPbTmpl() (*asset, error) {
	bytes, err := tmplProtoPbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto.pb.tmpl", size: 611, mode: os.FileMode(438), modTime: time.Unix(1575956779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\xb1\x6a\x03\x31\x0c\x86\xf7\x40\xde\x41\x2f\x60\x7b\xe8\x66\xc8\x5c\xba\x74\x29\x9d\x8b\xee\xa2\x2a\x06\x9f\x65\x2c\xb9\x14\x42\xde\xbd\x44\x3d\x28\x85\x2e\x5d\x8c\x11\xdf\xff\xc1\x97\x33\x3c\x35\x35\xac\x15\xfa\x10\x93\x87\x78\x3c\xe4\x0c\x17\xb3\xae\x39\x25\x2e\x76\x99\x4b\x5c\x65\x4b\x2c\xc2\x95\x92\x53\xcb\x7c\x4f\x83\x2a\xa1\x92\x3a\xff\xda\xcf\x68\xf4\xad\x58\xe1\x51\x60\x29\xed\x5c\x1a\x2b\x7c\x14\x74\x02\x58\x80\xc9\x20\x4c\xf8\x25\xad\xd8\xf8\x47\xea\x9f\xff\xf2\x6b\x60\x6a\x81\x7d\xe7\xdb\x17\x22\xc0\xaa\xbb\xe8\xaf\x96\xd1\x57\x7f\x02\x4b\xb2\x41\x94\x36\x54\xa3\x91\xe8\x13\xb7\x5e\xef\x51\xc7\xc3\x1e\x73\xbd\xc6\x67\xdc\xe8\x76\x8b\x7e\x80\x10\x58\xde\x64\xda\xa9\xd7\xc9\xa5\xe9\xe9\xee\xc9\xf1\x2b\x00\x00\xff\xff\x7e\x97\x17\x88\x49\x01\x00\x00"

func tmplProto_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileBatTmpl,
		"tmpl/proto_compile.bat.tmpl",
	)
}

func tmplProto_compileBatTmpl() (*asset, error) {
	bytes, err := tmplProto_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.bat.tmpl", size: 329, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x6b\xf3\x30\x10\x86\xf7\x40\xfe\xc3\x7d\x64\xfd\xac\x1b\xba\x25\x64\x2e\x5d\xda\x21\x74\x2e\xb2\x72\x39\x8b\x4a\x3a\x23\x9d\xd2\x96\x90\xff\x5e\x24\x9b\x42\xa1\x8b\x7d\x88\xf7\x9e\xf7\x91\x76\xff\xb0\x96\x8c\xa3\x4f\x48\xe9\x0a\x65\xda\x6e\xb6\x9b\x1d\x3c\xa5\xa2\x36\x04\x98\xb3\xa8\x3c\xc0\x25\x4b\x84\x22\x35\x3b\x82\x68\xdd\xcb\x09\x24\x85\x2f\xd3\x92\x30\x66\xfa\x00\xbf\xe6\x6d\x55\x71\x92\x2e\x7d\x88\xf6\x9d\x20\xf8\x51\x45\x42\x8f\xb2\x57\x70\x41\x12\xc1\xa4\x3a\x97\x3d\x22\x7b\x9d\xea\x68\x9c\x44\x64\x11\x0e\x84\xbd\x71\xac\x97\xbe\x60\xb0\x71\x98\x92\x29\x13\x1c\xc0\x60\x63\x7b\xae\x99\xe0\x00\x1d\xbf\xfe\xd6\xfe\xed\x66\xd7\xf6\x5e\xe7\xb3\x55\x5a\xe4\x1d\x3c\x0a\x8c\x3e\x9d\x7d\xe2\x02\x57\x6f\x17\x13\x01\x26\x85\xa1\xc2\x2f\x83\x60\x13\xff\x18\xe0\xad\x4f\xff\x17\xcc\xc0\x94\x06\x96\xfb\x5a\x71\x22\x02\x1b\x8a\x74\xda\x5f\xb7\xc9\xb3\xeb\x9f\x81\x05\x35\x13\x61\xb4\x45\x29\x23\x7d\xda\x38\x07\x2a\xed\x9d\x57\xc1\xdb\xcd\x3c\xdb\x48\xf7\xbb\xe9\x07\x30\x0c\x2c\x6f\x52\xf5\x38\x87\xca\x3e\x95\x63\xe3\xec\xcd\x77\x00\x00\x00\xff\xff\x44\x50\x25\xa7\xab\x01\x00\x00"

func tmplProto_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileShTmpl,
		"tmpl/proto_compile.sh.tmpl",
	)
}

func tmplProto_compileShTmpl() (*asset, error) {
	bytes, err := tmplProto_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.sh.tmpl", size: 427, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplSvcThriftTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x2d\x2e\x29\x2a\x4d\x2e\x51\xa8\xae\x56\x29\xd3\x0b\x4a\x2d\xc8\xa9\xac\xad\xad\xe6\xe5\xaa\xe5\xe5\x42\x95\x28\x2c\x4d\x2d\x2e\x81\x48\x55\x57\xa7\xe6\xa5\xd4\xd6\xf2\x72\xf1\x72\x15\xa7\x16\x95\x65\x26\xa7\x2a\x54\x57\xeb\xf9\x25\xe6\xa6\xd6\xd6\x06\xc3\x04\x78\xb9\xf0\xd8\x89\x62\x1b\x84\x03\xd1\xae\xa0\x61\x68\x85\x66\xa3\x42\x51\x6a\xa1\x26\xc8\x34\xb0\xa5\x60\x5b\x01\x01\x00\x00\xff\xff\xd6\xd0\xa5\x28\xce\x00\x00\x00"

func tmplSvcThriftTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplSvcThriftTmpl,
		"tmpl/svc.thrift.tmpl",
	)
}

func tmplSvcThriftTmpl() (*asset, error) {
	bytes, err := tmplSvcThriftTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/svc.thrift.tmpl", size: 206, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\x41\x8a\xc4\x20\x10\x45\xf7\x81\xdc\x41\xb2\x1e\xad\xbd\x90\x03\xcc\x66\x98\x1b\x84\x4a\x62\x4a\x69\x63\x89\xa9\xa6\x1b\xc4\xbb\x37\x8d\xe1\xaf\xfe\xe3\x7f\x9e\xb5\xea\x37\x5d\x82\x31\x2a\xf1\x25\x1c\xa2\xac\xf2\x22\xf9\xb2\x00\x1d\x18\xcc\xb8\x79\x67\xb8\x10\xec\xfc\x4a\x91\x71\x1f\x87\x7b\xac\x8b\xd2\x9a\x5c\x52\x13\xb1\xcd\xb8\x3d\x90\xdc\x92\x8b\x3b\xc2\x7b\xae\xd5\xfc\x77\xd2\x1a\x90\x4b\x9a\x18\x7e\xfa\x6f\x09\x67\xe6\x22\x33\x05\xf1\xcf\xd5\x6c\x7c\x42\xb7\xdc\x4e\x88\x61\x05\xe2\xbb\x4d\xaa\x56\xf3\x87\xa7\x6b\xcd\x74\x32\x0e\xdf\x7c\x02\x00\x00\xff\xff\x1d\x60\x4b\xe4\xbc\x00\x00\x00"

func tmplThrift_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileBatTmpl,
		"tmpl/thrift_compile.bat.tmpl",
	)
}

func tmplThrift_compileBatTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.bat.tmpl", size: 188, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\xc3\x30\x0c\x85\xef\x85\xfe\x07\xd1\x5e\x17\x9b\x6d\xb7\x40\xaf\x83\x5d\xb6\xfd\x83\x62\xa7\xaa\x22\xe6\x58\xc6\x56\xd7\x42\xc8\x7f\x1f\x99\xbd\x4b\xd0\x49\xfa\x9e\xde\x7b\x47\x78\x8f\x45\x5d\x08\xa0\x63\xe6\xab\xc2\xe4\x86\xcf\x62\xf6\xbb\x23\x3c\x1b\xf0\x19\xef\xc0\x4d\xe0\x45\x8a\xae\xe0\x65\x03\x02\x7b\xfc\xc1\xf8\xc7\x5e\x37\xac\xba\xae\xe4\x4d\x32\x04\x8e\xb7\x07\x14\x44\xe8\x61\x54\x4d\xa5\xb7\xb6\x2a\x8c\x4b\x6e\x18\xd1\x48\x26\x7b\x91\x7b\x0c\xe2\x2e\xfb\x5d\xeb\xd4\x65\xe8\x3a\xc2\x08\x07\x92\x3e\xb9\xe1\xdb\x11\x9e\x53\xc6\x2b\x3f\x4e\xf3\x6c\xbe\xea\x65\x59\x2c\x61\xec\x48\xec\x53\xfd\x3b\xf3\x94\x24\xeb\x89\x58\xc7\x9b\x37\x83\x4c\xb6\xa6\xb4\x4c\x1b\xd8\x5b\x92\xb6\x1d\x60\x9e\xcd\x87\x9b\x70\x59\xcc\x7f\xeb\x75\x7e\x03\x00\x00\xff\xff\x44\x38\x4f\x96\x22\x01\x00\x00"

func tmplThrift_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileShTmpl,
		"tmpl/thrift_compile.sh.tmpl",
	)
}

func tmplThrift_compileShTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.sh.tmpl", size: 290, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/file.tmpl":                     tmplFileTmpl,
	"tmpl/gk.json - 副本.tmpl":             tmplGkJsonTmpl,
	"tmpl/gk.json.tmpl":                  tmplGkJsonTmpl2,
	"tmpl/main_api.tmpl":                 tmplMain_apiTmpl,
	"tmpl/main_svc.tmpl":                 tmplMain_svcTmpl,
	"tmpl/partials/alias_type.tmpl":      tmplPartialsAlias_typeTmpl,
	"tmpl/partials/constants.tmpl":       tmplPartialsConstantsTmpl,
	"tmpl/partials/endpoint_func.tmpl":   tmplPartialsEndpoint_funcTmpl,
	"tmpl/partials/func.tmpl":            tmplPartialsFuncTmpl,
	"tmpl/partials/func_parameters.tmpl": tmplPartialsFunc_parametersTmpl,
	"tmpl/partials/func_results.tmpl":    tmplPartialsFunc_resultsTmpl,
	"tmpl/partials/func_return.tmpl":     tmplPartialsFunc_returnTmpl,
	"tmpl/partials/imports.tmpl":         tmplPartialsImportsTmpl,
	"tmpl/partials/interface.tmpl":       tmplPartialsInterfaceTmpl,
	"tmpl/partials/interface_func.tmpl":  tmplPartialsInterface_funcTmpl,
	"tmpl/partials/interface_stub.tmpl":  tmplPartialsInterface_stubTmpl,
	"tmpl/partials/struct.tmpl":          tmplPartialsStructTmpl,
	"tmpl/partials/struct_function.tmpl": tmplPartialsStruct_functionTmpl,
	"tmpl/partials/vars.tmpl":            tmplPartialsVarsTmpl,
	"tmpl/proto.pb.tmpl":                 tmplProtoPbTmpl,
	"tmpl/proto_compile.bat.tmpl":        tmplProto_compileBatTmpl,
	"tmpl/proto_compile.sh.tmpl":         tmplProto_compileShTmpl,
	"tmpl/svc.thrift.tmpl":               tmplSvcThriftTmpl,
	"tmpl/thrift_compile.bat.tmpl":       tmplThrift_compileBatTmpl,
	"tmpl/thrift_compile.sh.tmpl":        tmplThrift_compileShTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"file.tmpl":         &bintree{tmplFileTmpl, map[string]*bintree{}},
		"gk.json - 副本.tmpl": &bintree{tmplGkJsonTmpl, map[string]*bintree{}},
		"gk.json.tmpl":      &bintree{tmplGkJsonTmpl2, map[string]*bintree{}},
		"main_api.tmpl":     &bintree{tmplMain_apiTmpl, map[string]*bintree{}},
		"main_svc.tmpl":     &bintree{tmplMain_svcTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"alias_type.tmpl":      &bintree{tmplPartialsAlias_typeTmpl, map[string]*bintree{}},
			"constants.tmpl":       &bintree{tmplPartialsConstantsTmpl, map[string]*bintree{}},
			"endpoint_func.tmpl":   &bintree{tmplPartialsEndpoint_funcTmpl, map[string]*bintree{}},
			"func.tmpl":            &bintree{tmplPartialsFuncTmpl, map[string]*bintree{}},
			"func_parameters.tmpl": &bintree{tmplPartialsFunc_parametersTmpl, map[string]*bintree{}},
			"func_results.tmpl":    &bintree{tmplPartialsFunc_resultsTmpl, map[string]*bintree{}},
			"func_return.tmpl":     &bintree{tmplPartialsFunc_returnTmpl, map[string]*bintree{}},
			"imports.tmpl":         &bintree{tmplPartialsImportsTmpl, map[string]*bintree{}},
			"interface.tmpl":       &bintree{tmplPartialsInterfaceTmpl, map[string]*bintree{}},
			"interface_func.tmpl":  &bintree{tmplPartialsInterface_funcTmpl, map[string]*bintree{}},
			"interface_stub.tmpl":  &bintree{tmplPartialsInterface_stubTmpl, map[string]*bintree{}},
			"struct.tmpl":          &bintree{tmplPartialsStructTmpl, map[string]*bintree{}},
			"struct_function.tmpl": &bintree{tmplPartialsStruct_functionTmpl, map[string]*bintree{}},
			"vars.tmpl":            &bintree{tmplPartialsVarsTmpl, map[string]*bintree{}},
		}},
		"proto.pb.tmpl":           &bintree{tmplProtoPbTmpl, map[string]*bintree{}},
		"proto_compile.bat.tmpl":  &bintree{tmplProto_compileBatTmpl, map[string]*bintree{}},
		"proto_compile.sh.tmpl":   &bintree{tmplProto_compileShTmpl, map[string]*bintree{}},
		"svc.thrift.tmpl":         &bintree{tmplSvcThriftTmpl, map[string]*bintree{}},
		"thrift_compile.bat.tmpl": &bintree{tmplThrift_compileBatTmpl, map[string]*bintree{}},
		"thrift_compile.sh.tmpl":  &bintree{tmplThrift_compileShTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
