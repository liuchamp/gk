// Package template Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tmpl/file.tmpl
// tmpl/gk.json.tmpl
// tmpl/main_api.tmpl
// tmpl/main_svc.tmpl
// tmpl/partials/alias_type.tmpl
// tmpl/partials/constants.tmpl
// tmpl/partials/endpoint_func.tmpl
// tmpl/partials/func.tmpl
// tmpl/partials/func_parameters.tmpl
// tmpl/partials/func_results.tmpl
// tmpl/partials/func_return.tmpl
// tmpl/partials/imports.tmpl
// tmpl/partials/interface.tmpl
// tmpl/partials/interface_func.tmpl
// tmpl/partials/interface_stub.tmpl
// tmpl/partials/struct.tmpl
// tmpl/partials/struct_function.tmpl
// tmpl/partials/vars.tmpl
// tmpl/proto.pb.tmpl
// tmpl/proto_compile.bat.tmpl
// tmpl/proto_compile.sh.tmpl
// tmpl/svc.thrift.tmpl
// tmpl/thrift_compile.bat.tmpl
// tmpl/thrift_compile.sh.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplFileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\x84\x30\x10\x85\xef\x0b\xfb\x1f\x86\xe0\xa1\x85\x22\x3d\x17\x7a\x28\x7b\xda\x43\x4b\xa1\xa5\xd7\x65\x70\x47\x1b\xaa\xd1\x26\xb3\xc2\x32\xf8\xdf\x4b\x8c\xb6\x51\x54\x7a\x8b\xf3\x5e\xbe\xf7\x18\x23\xa2\x73\x30\x04\xe9\xa1\xae\x2a\x32\x0c\x4a\x75\x9d\xc8\xf8\xd9\x75\xfb\x9d\x08\x99\xb3\x3f\xec\x77\x0d\x66\x5f\x58\x10\x88\xa4\xaf\xe1\x18\xe6\x3d\xa5\x60\xb8\x29\xc9\x40\x7a\xac\x9a\xda\xb2\xbb\x85\xfb\x70\x9d\xa9\x6a\x4a\x64\x02\xa5\x83\xa2\x7e\x3d\x33\xfe\x94\x73\xa8\x8d\x63\x34\x8b\xa4\x6c\xd4\x54\xe4\xdb\xa4\x7d\xa0\x5d\x02\xb5\x68\x3d\xc3\xab\x9b\xd7\x9f\x4a\x8d\xee\xfd\xda\xd0\x02\x03\xbd\x76\xe2\x6b\x43\x2a\x32\x6e\xe2\x8e\x86\xc9\xe6\x98\xd1\x5f\x27\x8b\xa6\x20\x48\xf4\x5d\xd2\xc2\xc3\x63\x6c\xf1\x7f\x24\x5a\xe2\x38\x57\x90\xb4\x93\x90\xd5\xb4\x37\xb6\x97\x8c\xd7\xa3\x06\x7d\x9a\xe3\xfa\xe1\xff\x43\x9e\x89\x3f\xeb\xf3\x3c\x24\x4a\x19\x0c\x41\xd5\x39\xd0\x37\x24\xed\x90\x9d\xbe\x60\x45\xfd\xe3\x9b\xae\x36\xbf\x98\x2c\x54\x10\xa1\xd2\xd1\x5c\x0f\x25\x4f\xde\xc6\xba\x36\x6b\x6d\xa3\xd2\x3f\x01\x00\x00\xff\xff\x19\x28\x3f\x96\xf2\x02\x00\x00"

func tmplFileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplFileTmpl,
		"tmpl/file.tmpl",
	)
}

func tmplFileTmpl() (*asset, error) {
	bytes, err := tmplFileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/file.tmpl", size: 754, mode: os.FileMode(438), modTime: time.Unix(1561360772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\xcf\x6a\xc3\x30\x0c\xc6\xef\x85\xbe\x43\xf0\x79\xf4\x01\x7a\xdd\x7d\x97\x3c\x40\xaa\x38\x4a\x6a\x1a\xff\xc1\x56\x57\x86\xf1\xbb\x0f\xa7\x71\xea\x78\x1b\x1d\x8c\x91\xa3\xa5\x4f\xd2\xf7\xb3\xe4\xf7\xbb\xaa\x62\x0e\xed\xbb\xe0\xc8\x8e\xd3\xb3\xaa\x98\x01\x3a\xb3\x23\xf3\xfe\xe4\x3d\xe9\x5a\xc1\x05\x5f\xc1\x61\x75\xa8\xef\xca\x37\x90\x18\xc2\x29\x04\xef\x7b\x31\x62\x8d\x06\x2c\x90\xb6\x21\x98\xcb\xf0\x25\xf6\xbc\x4d\x32\xf0\x32\xcf\x8f\x0d\x1a\x05\x12\xd9\x31\x99\x3b\x0c\x7a\x49\x0b\x45\x68\x7b\xe0\x8b\xa6\x2e\xea\x1d\xd9\x2b\xa7\x94\x6d\xc1\x09\x9e\x24\x51\x11\x26\x1d\x93\xa2\xeb\x46\xbc\x81\xcd\xc8\xe7\x92\x47\x2a\xce\xcd\x6a\x50\x75\x46\x0b\x45\x6e\xbb\xcf\x4a\x16\x7e\xf8\x2d\x2a\x1c\x9f\x89\x0c\x59\x50\xce\x68\x4b\xdb\xb9\x7e\x58\xf8\xce\x76\x34\x99\x6f\x98\xd0\x51\x53\x0a\x9a\x18\x2d\xe8\x06\x6b\x78\x49\xb7\x35\xdb\x8a\x2c\x1a\x5c\xc8\x18\x1f\x05\xaa\x35\x59\x14\xdc\xc3\x05\x9a\x69\xff\xce\xf3\xbc\xc4\xb4\xf9\x4c\x2e\xbb\x74\x22\xbf\x9f\x3a\x6f\x6d\x85\x2d\x41\xa8\x72\x55\x40\x78\x83\x8f\x7f\xeb\xdf\x61\x0f\xd7\x91\x9a\xec\x1c\xa6\xb3\x61\xfb\x5d\xf8\x0c\x00\x00\xff\xff\x40\x23\xff\x04\xe8\x04\x00\x00"

func tmplGkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGkJsonTmpl,
		"tmpl/gk.json.tmpl",
	)
}

func tmplGkJsonTmpl() (*asset, error) {
	bytes, err := tmplGkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/gk.json.tmpl", size: 1256, mode: os.FileMode(438), modTime: time.Unix(1596615722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMain_apiTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\xcd\x8e\xdb\xc8\x11\x3e\x93\x4f\xd1\xdb\x40\x00\x52\xa0\x48\x8d\xb3\x6b\x6c\x26\x3b\x07\x67\x2c\xdb\x13\x68\x34\xc2\x48\x86\x81\xbd\x18\x3d\x64\x89\x6a\x98\xec\x66\x9a\x4d\x69\xc6\xf6\x00\xb9\x04\xf9\x01\x7c\x4c\x4e\x1b\x04\x7b\x0f\x92\x53\x2e\x01\x92\xa7\xc9\xae\x77\xdf\x22\xa8\x6a\x52\x7f\x33\x96\xbd\x06\x46\x6c\x56\x57\x57\x57\x57\x7d\xfd\x55\xd1\x95\x48\x5f\x89\x1c\x58\x29\xa4\xf2\x7d\x59\x56\xda\x58\x16\xf8\x1e\x9f\x17\x22\xe7\xf8\x2c\x2d\x3e\x14\xd8\x64\x61\x6d\xb5\x3d\x4e\xaa\xca\xe8\x39\x4a\x74\xed\x7e\x93\x5a\xe6\x4a\x14\xf8\x52\xdf\xd4\xa9\x28\x68\x68\x65\x09\xdc\xf7\x3d\x9e\x4b\xbb\x68\xae\xe2\x54\x97\x49\xae\x8d\x2c\x0a\x91\x94\xcd\x35\xf7\xbd\xda\x66\xaf\x65\xf5\x4a\x2a\xb6\xad\xa3\x2b\x50\x4e\x9c\xb8\x47\x3f\xd7\xdc\xf7\xdc\x18\x1d\xf8\xa8\x76\x62\x00\x0f\x04\x66\xed\xfb\xd6\x82\xca\xe8\x12\xec\x02\x9a\x3a\x49\x0b\x09\xca\xbe\xcc\x75\x21\x54\xbe\x3d\x81\x43\xb7\x74\xdf\xfd\xfe\x2b\x69\x13\xfc\x2b\x74\xce\x0f\x4d\x26\x05\x2c\xa1\xe0\x7e\xe8\xfb\x4b\x61\x30\xb6\x49\xf2\xfe\x8f\x7f\xf8\xfe\x9b\xbf\xfb\xde\x53\x69\x9f\x89\x7a\xc1\x18\x3b\x61\x7c\xac\x59\xf7\x3e\x31\x7a\x29\x33\xc8\xb8\xef\xfd\xaa\x91\x45\x36\x93\x25\xb4\x2a\x9b\xf7\x8d\x52\xd8\x59\xce\xb7\xec\x61\x02\xe3\xa9\x35\x52\xe5\x01\x6f\x0d\xf3\xa8\xdb\x22\x62\x28\x63\x0b\xd4\x4e\x75\x06\x4c\xcf\x99\x5d\xc8\x9a\x89\xaa\x62\x41\x0e\x0a\x8c\xb0\xc0\xb4\x62\x57\xb8\x61\xc8\x43\xdf\xbb\xda\x72\x65\xc7\xfa\xda\x27\x1e\x6d\xfc\x8b\x98\x93\x33\x4c\xff\x27\x98\x0f\x37\xe1\xf9\xfe\x9b\x77\xdf\xfd\xe9\xdb\x1f\x7f\xf7\xee\xfd\x7f\xfe\xe1\x7b\xcf\xac\xad\x1e\x65\x99\xb9\x73\x28\x4c\x4c\x5f\x64\x99\xe1\x11\xe3\xc7\x47\x83\xc1\x60\x80\x23\xd4\x85\xba\x66\x73\x6d\xd8\xb3\xd9\x6c\xc2\x82\x5f\x4f\x2f\xc6\x21\xab\xc1\x2c\xc1\xe0\x41\x1e\xc3\x55\x93\x93\xc9\x3d\x8b\x19\x4e\xec\x9a\x3c\xc2\x11\x2d\x60\x42\x65\xac\x04\x6b\x64\x5a\xb3\x42\xd6\x16\x14\x13\x6e\x2f\x34\x3a\xd2\xf9\x08\x33\x7d\xc7\xcd\x42\xe7\x7d\x87\x81\x88\xb9\x1d\x70\x30\x05\xcb\x0a\x9d\x33\x9a\x61\x01\xc9\xdf\x4a\x35\xd7\x6f\x57\xc2\xa8\xb7\x60\x8c\x36\x14\xf5\xe9\x32\x1d\x8b\x12\xee\xe6\xb4\x5e\xa6\x7d\x25\x28\xe8\x3c\x17\x16\x56\xe2\x06\x87\x76\x01\x0c\xc5\xeb\x90\xe3\xb9\x65\x0a\x4c\xaa\xf5\x30\x93\x75\xaa\x97\x60\x6e\x70\x83\x24\xf9\xf1\xf7\xef\x7e\xf8\xe7\x9f\x7d\xef\x12\xac\xb9\x39\x17\xd7\x8c\x6d\x76\x3b\x53\x36\xe0\x06\x27\xfa\xa5\xb8\xe6\x11\x3b\x8a\x18\xaf\xc0\xf4\x0d\xfc\xa6\x81\xda\x32\x9c\x93\x50\x33\xab\x59\x26\xe7\x73\x30\xa0\x2c\x93\xaa\xb6\x42\xa5\x40\x91\x21\xb3\x08\x09\xdd\xd8\xce\xec\xe3\xc6\x08\x2b\xb5\xea\x6c\x5b\x37\xcd\x23\xf6\xf3\x41\x0f\x5f\xe2\x29\xa4\x5a\x65\x7b\x9b\xb5\x6a\x11\x93\x2a\x2d\x9a\x4c\xaa\xbc\xdb\xdf\x9d\xc4\x21\xe7\x7f\xff\xfd\xeb\x0f\xff\xfa\x0b\x85\xee\x31\x94\xfa\xbe\xc0\x65\x50\x6a\x97\x0f\xf7\xec\x22\x43\x91\x43\xe4\xe0\xc4\x16\x64\x92\xe4\xbb\xbf\xfd\xfb\xfd\xb7\xbf\xed\x4c\x7f\x4d\x14\x73\x1f\x86\x5a\xf2\xe9\x40\x84\x20\x3d\x4e\x5a\x4a\x3a\xfe\xc5\xe7\x47\x47\x89\xa8\x64\xb2\x7c\x90\xd4\x95\x50\x35\xaa\x0c\x95\xb8\x2a\x80\x39\x93\xcc\x1a\x91\xe2\xb9\x96\x52\x30\xd1\x09\x09\xc7\xa7\xba\x28\x20\xb5\xda\x30\x50\x59\xa5\xa5\xb2\x11\xfb\x98\x79\xbc\x57\xfe\xbc\x51\x29\x31\x7c\x10\xb2\x37\xbe\x47\xee\x4e\x84\xa9\x21\x08\x7d\x3c\x1a\x1b\xe9\x3c\xc7\x3d\x33\x8d\x5a\xb1\xef\x15\x3a\xcf\xc1\xb0\xe3\x13\x77\x3f\x47\xf4\x1a\x84\xdd\x44\x3c\xd2\x79\xc0\xcb\x9a\x90\xbc\x80\xa2\xa0\x18\xe6\xf7\x90\xcc\xd5\x7d\xd4\x10\xfa\x5e\x06\x73\x30\xec\x1e\x6b\xb9\xd6\xd9\xd5\x0d\xfc\x44\x7b\x74\x8a\x33\x65\xc1\x98\xa6\x42\x5a\x53\x59\x01\x26\xf6\x3d\x30\x26\xc5\x63\x94\xe2\x15\x04\xe9\x42\x28\xe6\x6e\x96\xef\xe5\x9a\x61\x5c\x5c\x48\xbc\x3d\x25\x5d\xc7\x53\x2a\x65\xa1\xef\x79\xae\xa8\xc5\x63\x6d\xe5\xfc\x26\x48\x23\xd6\xd6\xb6\x78\x7a\xf6\xf4\x6c\x3c\xdb\x79\x9f\x0d\x2f\xcf\x71\x0d\xed\xfb\x55\x9f\xcd\x4b\x1b\x0f\x71\xc7\x79\xc0\x7f\x86\xd9\xfe\xaa\x9f\x86\xbe\x77\x4b\x91\x47\xc2\x73\x99\x9b\x19\x91\x82\x61\xbd\x75\x21\x8c\x9d\xc4\xf7\xd0\xb9\x96\x18\xc9\x2a\xdb\xfc\xa3\x93\xa0\x78\xa1\x6b\x3b\xc1\xc2\xdd\x5e\x5c\x5e\xe8\x54\x14\x28\x3d\xfe\x72\xc0\x51\xa3\x85\xf7\x9a\x48\x7a\x2d\xab\xe0\x5c\x53\xc3\x58\xeb\xaa\x75\xe1\x84\x05\xbd\x6d\x70\x9f\x30\x8e\xf8\xf7\xbc\xae\x94\x76\x9b\x6c\xca\x70\x3c\x86\xd5\x65\x3b\xbb\xbd\x18\x97\xe1\x9f\xcb\x75\xb7\x3e\x3e\x2d\x34\x21\xcf\xf3\x5e\x0f\x27\x11\x7b\x89\x91\xdf\x9c\x7b\x0c\xab\x61\x8b\xee\x60\xcb\xeb\x88\x75\x87\xa4\x8c\x88\xb2\x2a\x1c\x3e\x77\x56\x9e\xeb\xac\x29\xf4\xd4\xcd\x06\x47\x03\xda\x64\x2b\xc0\x11\xc6\x8c\xed\x2d\x72\x53\x41\xe7\x5f\xb4\x35\xfb\x42\xda\xc5\x08\x63\xb9\x76\xe9\xf5\x70\x12\xee\x6b\x6c\xa2\x17\xec\xc4\xf2\x8e\x62\xe7\x58\xeb\x7e\x88\xee\xc9\x39\xf9\xf4\xd9\x09\x53\xb2\x20\x28\xee\xdc\x31\x30\xc8\x22\x60\x28\x98\x9e\xae\xe3\xe1\xb5\xb4\xc1\x11\xbe\xdd\xba\xd5\x9f\xed\xe6\xef\x8e\x05\x4b\x72\xbc\x4f\x2e\x33\x54\x23\x6e\x2a\xba\x61\x63\x61\xe5\x92\x46\xcf\x2f\x47\x3c\x62\x7b\xc9\xbb\xf5\x7d\xfa\x4b\x12\x36\x25\x26\x64\x46\x37\x16\xea\xd8\xf7\x28\xf6\x65\x73\x4d\xb9\x47\x21\xb1\xc3\x1b\xdf\xf7\xbc\x24\x79\x43\xbf\x04\xdb\xa6\x06\x83\xa5\x0e\x9f\x1d\x6b\xc5\x53\xb0\x4e\x43\xce\x3b\x85\x2e\x33\xf8\x6a\x8d\x50\x35\x26\x63\x1b\x0c\xa7\xd4\xa2\x4d\xc1\x06\x88\xdd\xe7\x35\x26\xaa\xd7\x15\xac\x6e\x38\xeb\xca\x83\x0b\x40\xc4\x76\xae\x57\xf8\xcb\xfd\x50\x27\x89\xe7\x55\x42\xc9\x34\x00\x63\xdc\x3d\x0d\x28\x2b\x49\x42\xe1\x4d\x12\xcf\xc4\x13\x61\x17\x13\x03\x73\x79\x1d\xf0\x44\x54\x55\x82\x3e\xf2\x30\x7e\xe6\x48\x26\xa0\x2b\x80\xec\x5f\x6d\x69\x49\xa7\x15\x31\x91\xa6\x50\xd7\xa7\x5a\x59\xa3\x8b\xe0\xce\xf1\x90\xd8\x3b\x43\xeb\x50\x68\xdb\xc1\x75\x17\xbc\xee\x54\x61\xd8\xba\x78\xbb\xce\x0e\x95\x87\x8d\xdd\x7d\x72\xdb\x83\x83\xd3\xa2\xc6\x06\x17\xe2\xb3\xad\x56\xbd\xae\xd7\xda\xa6\x30\x3a\xdf\x88\xfa\x9d\x47\x2a\x23\x20\x04\x6b\xc5\x88\x99\x35\x9d\x25\x09\x73\x8d\x92\x6b\x8e\x88\x7f\xef\x73\x04\xa1\x53\xe8\x9c\xae\x44\xd0\x65\x6a\xe3\xd8\xa6\x4d\x42\x2f\x4a\xd4\xee\x58\x86\x36\x3f\x6f\xae\x89\x3d\xca\x36\x03\x01\x4f\x48\xdd\x7d\x8e\x24\xdc\x15\xc5\x2e\x3d\x4f\x70\x77\x9a\x89\xcf\x54\x06\xd7\xe1\x81\xa5\x69\x99\x15\x52\xc1\x87\x2d\x9c\x3a\x85\x43\x36\xf0\x47\x16\x07\x6c\x4c\x9c\xc2\x21\x1b\xf5\x4d\x79\xa5\x8b\x0f\x9b\x98\xd2\xfc\x21\x0b\x74\xe9\x3f\x6c\x80\x00\xb5\xbf\xbe\x6d\x6d\x79\xc4\xba\xaf\x9e\x35\xc4\x43\x4c\xef\x0e\x8c\x3a\xc0\xac\x5b\xe9\x8f\x22\x66\xad\x19\xb1\x72\x0d\x99\x97\xec\x64\xa7\x09\xb0\x60\x4a\xa9\x84\x85\x8c\x4a\x25\x1a\x0c\xfd\xdb\xb6\x83\xd9\xbd\x4a\x8b\x9d\xc3\x85\x3b\x6f\x08\x36\x03\xb6\x31\xea\x6e\x04\x08\x8e\x2b\x27\xbf\x84\xba\xd2\xaa\x86\x17\x46\x12\xf3\x1b\xd6\x6b\xe5\xd4\x6e\x3a\xd0\x8a\xa2\xd0\xab\x0b\x23\x73\xa9\x10\x8b\x26\x7e\x06\x22\x03\x13\x3f\x05\x1b\x70\x27\xe7\x2d\x93\x6f\xab\x52\xe5\x74\x74\xbc\x23\x66\xbc\xc7\x5b\xf6\x5e\xb5\xa6\x82\x10\x29\x31\xe0\x8f\xe8\x80\xfd\xf6\x84\xfd\x47\xb8\xac\xdf\xee\x10\x6d\x1b\xa7\x74\x7c\xd2\xea\x73\xb0\x0b\x9d\x51\x9b\xf9\x74\x38\x8b\x26\xcf\x67\xd1\xe4\x62\x3a\x8b\x1e\x0f\x47\xc3\xd9\x30\xba\x98\xcc\xce\x2e\xc6\x53\xf2\xff\x93\xec\x39\x15\xb2\xf7\xa8\xb1\x0b\x6d\xe4\x6b\xea\xe3\x39\xb9\xb4\x88\x29\xd9\xc8\x2a\xc1\xaa\xa5\x86\x4d\xfe\x76\x5a\x49\x62\x00\xf7\x82\x41\xc2\x5a\xd1\xb2\xc3\x66\x82\xda\x4d\xf7\x51\x85\x94\x81\x83\x98\xdc\x38\x53\x73\x8d\x1c\x50\xaf\xa4\x4d\x17\xac\xb7\xfe\xf6\x7a\xe3\x7b\xa9\xa8\xa1\x23\x90\x63\x87\x5a\x37\xb7\x63\x81\xd0\x88\x26\x9c\x3a\x7e\x78\x1d\xd0\xee\xf6\x73\xca\xf8\x81\x76\x40\xf9\x85\x30\x6a\xa3\x4c\x4d\xda\x01\xed\xb6\xe8\x20\x95\x77\xf4\xe8\xd8\x71\x0c\xab\x91\xce\xe7\xa5\x6d\x23\x86\x2d\xa9\xcd\x74\x63\xc3\x6d\x45\x32\x34\x86\xd5\x13\x59\x60\x0d\xee\xd8\xb4\xdb\x2b\xdc\x33\xba\x4b\xb9\xf5\x32\xc5\x3b\xdc\xf6\x82\x4e\x17\x4b\xe8\xd4\x8a\xb2\xea\x58\x1a\x05\x35\x0a\x9e\x68\x53\x0a\x1b\xb4\x74\x4e\xdf\x68\xf4\x9f\x01\x08\xf1\xf6\xb2\x91\x70\xac\x57\x41\x18\x9f\xa9\x80\xde\x9e\xc8\x6b\xc8\xbe\xd6\x0a\x02\x7e\x3a\x9d\xf1\x88\x3d\x1c\xf4\x1e\x0e\x7a\x5f\x22\xfb\xdc\x46\x8c\x3f\x18\x0c\x1e\xf6\x07\x47\xfd\xc1\x83\xd9\xd1\x17\xc7\x83\xcf\x8f\x07\x5f\xc4\x03\xfa\xc7\x0f\x3b\x6f\x11\x84\xdb\x0e\x1f\x56\xc7\x06\x9d\x0a\x32\x4e\x3d\x86\xb9\x68\x0a\x7b\x4a\xb2\x70\xcd\x15\x4e\xd9\xbf\xf5\xff\x1f\x00\x00\xff\xff\x13\x28\x74\x06\x16\x13\x00\x00"

func tmplMain_apiTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMain_apiTmpl,
		"tmpl/main_api.tmpl",
	)
}

func tmplMain_apiTmpl() (*asset, error) {
	bytes, err := tmplMain_apiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/main_api.tmpl", size: 4886, mode: os.FileMode(438), modTime: time.Unix(1596616343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMain_svcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x18\x4b\x6f\xe3\xc6\xf9\x4c\xfe\x8a\x09\x81\xa2\x94\x41\x93\x72\x9a\x04\xa9\x11\x1f\xb2\x5e\x7b\xd7\x88\x57\x35\x2c\x07\x01\x52\x14\xc6\x98\xfc\x44\x0d\x3c\x9c\x61\x67\x86\x92\xbd\x5e\x03\xbd\x14\x7d\x00\x7b\x6c\x4f\x29\x8a\xdc\x8b\xf6\xd4\x4b\x81\xf6\xd7\x34\xd9\xe4\x5f\x14\xdf\x3c\x24\x51\x92\xbd\xd9\x1c\xba\xc0\x5a\xe4\x7c\xef\xf7\x37\x6c\x69\x79\x4d\x6b\x20\x0d\x65\x22\x8e\x59\xd3\x4a\x65\x48\x1a\x47\xc9\x84\xd3\x3a\xc1\xdf\xc6\xe0\x8f\x80\xf0\x53\x4c\x8d\x69\x57\x9f\x8b\xb6\x55\x72\x82\x27\x52\xbb\xbf\x85\x66\xb5\xa0\x1c\x5f\xf4\xad\x2e\x29\xb7\x8f\x86\x35\x90\xc4\x71\xa4\x4d\xf5\x92\xb5\xd7\x4c\x90\xa4\x66\x66\xda\x5d\xe5\xa5\x6c\x0a\xd9\x82\x70\xc7\x85\xfb\xd9\xad\x65\x12\x47\xee\x19\xc5\xbc\x15\xbb\x50\x80\xda\x83\x0a\x1a\x6a\x53\xb5\x4a\x36\x60\xa6\xd0\xe9\x1e\xf9\xf2\xb8\x28\x39\x03\x61\x2e\x6b\xc9\xa9\xa8\x57\x00\xa8\xf1\xbb\x51\xd8\xc7\xe0\x9c\x5a\xca\x9a\x43\xee\x90\x72\xa9\xea\xa2\x56\x6d\xf9\x30\xa4\xb8\x06\x68\x29\x67\x33\xeb\xa2\x55\xc9\xb5\xdc\xbd\x66\xa6\xc0\xff\x5c\xd6\xc9\x63\xc0\x82\xc3\x0c\xf8\xc3\x28\x0d\x18\xc5\xca\x75\xd3\x36\x11\x7a\x6e\x18\xc4\xf1\x8c\x2a\xcc\x89\xa2\x78\xf3\x87\xdf\x7f\xfb\xd5\xdf\xe2\xe8\x19\x33\xcf\xa9\x9e\x12\x42\x0e\x48\x32\x92\x24\xbc\x9f\x29\x39\x63\x15\x54\x49\x1c\x3d\xe9\x18\xaf\x2e\x58\x03\x1e\x65\xf9\xbe\x44\x1a\x04\xce\xf5\x0a\x3f\x4c\xbc\x7c\x6c\x14\x13\x75\x9a\x78\xc6\x49\x16\x44\x64\x04\xcf\xc8\x14\xb1\x4b\x59\x01\x91\x13\x62\xa6\x4c\x13\xda\xb6\x24\xad\x41\x80\xa2\x06\x88\x14\xe4\x0a\x05\x0e\x92\x41\x1c\x5d\xad\xa8\xd2\xe3\xbe\xd0\x29\xc9\x96\xfa\x65\xc4\x9d\x13\xcc\xd7\x1f\xc0\x7e\xd5\x3f\xdf\x7e\xf5\xfa\x9b\x3f\x7e\xfd\xfd\x6f\x5f\xbf\xf9\xf7\xdf\xe3\xe8\x99\x6a\xcb\x4f\xab\x4a\x6d\x58\x85\x01\xdf\xa5\x55\xa5\x92\x8c\x24\xfb\x7b\xc3\xe1\x70\x88\x4f\xf5\xf9\xd9\x21\xe1\x4c\x1b\x10\x04\xa1\xa0\x35\xaa\xff\x14\xae\xba\xda\xf2\x59\x63\x53\x21\xa0\xcf\x67\x0f\x9f\x2c\x01\xa1\xa2\x22\x3e\x9e\x5b\x98\x9e\xca\xfa\x14\x93\x65\x43\x37\x2e\xeb\x5d\x97\x46\x19\x71\x12\xf0\x61\x0c\x86\x70\x59\x13\x0b\x21\xa9\x3d\x7f\xc5\xc4\x44\xbe\x9a\x53\x25\x5e\x81\x52\x52\x59\x5f\x8f\x67\xe5\x88\x36\xb0\x19\x49\x3d\x2b\x77\x05\xb5\xae\x4e\xee\xee\xf2\x31\xa8\x19\x2b\x01\x71\xef\xef\xf1\xcc\x4c\x81\x20\x7c\xe1\x71\xed\x30\x08\x13\x8b\xc7\x8a\xe9\x52\xce\x40\xdd\xa2\xa4\xa2\xf8\xfe\x77\xaf\xbf\xfb\xc7\x9f\xe2\xe8\x1c\x8c\xba\x7d\x41\x6f\x08\x59\x8a\x3d\x11\x26\x4d\x14\x02\x76\x1b\x7a\x93\x64\x64\x2f\x23\x49\x0b\x6a\x57\xc1\xaf\x3b\xd0\x86\x20\x8c\x81\x26\x46\x92\x8a\x4d\x26\xa0\x40\x18\xc2\x84\x36\x54\x94\x60\x5d\x64\xd9\x62\x46\xc8\xce\x04\xb6\x4f\x3b\x45\x0d\x93\x22\xf0\x36\x0e\x9c\x64\xe4\x67\xc3\x1d\x7c\xc9\xc7\x50\x4a\x51\xad\x09\xf3\x68\x19\x61\xa2\xe4\x5d\xc5\x44\x1d\xe4\x3b\x4b\x5c\xde\xfc\xf7\x3f\x7f\xf9\xee\x9f\x7f\xb6\x3e\x7c\x0a\x8d\xdc\xe6\xc1\x0a\x1a\xe9\x02\xd3\x48\x0c\xf8\x9e\x4d\x9c\xe0\x1f\xeb\xbf\x89\x54\x04\xc1\xd6\x6b\xa0\x9c\x80\x6f\xfe\xfa\xaf\x37\x5f\xff\x26\x08\xf8\xd2\xb6\xcc\x6d\x29\xe5\x9b\x69\xc8\x29\xec\x66\xfb\x85\x6f\xb1\xfb\x3f\xff\x60\x6f\xaf\xa0\x2d\x2b\x66\xef\x17\xba\xa5\x42\x23\xca\x91\xa0\x57\x1c\x88\x63\x49\x8c\xa2\x25\x5a\x37\x63\x94\xd0\x70\xf8\xfc\xe2\xe2\x8c\x1c\x4a\xce\xa1\x34\x52\x11\x10\x55\x2b\x99\x30\x19\x79\x1b\x7b\x5b\x5c\x93\x4e\x94\x76\x3c\xa5\x03\x72\x17\x47\x56\xdd\x33\xaa\x34\xa4\x83\x18\x4d\x23\xa7\xb2\xae\x51\x66\x25\x11\x2b\x8f\x23\x2e\xeb\x1a\x14\xd9\x3f\x70\x45\x7a\x6a\x5f\xd3\x41\x00\xe4\xa7\xb2\x4e\x93\x46\xdb\xc4\x9e\x02\xe7\xd6\xa3\xf5\x96\x4e\x73\xb5\xad\x3f\x0c\xe2\xa8\x82\x09\x28\xb2\x85\x5b\x2d\x65\x75\x75\x0b\xef\xc8\x2f\x8e\xb0\x81\x38\x2f\x5c\x28\x5a\x82\x22\x3b\x8b\x21\x99\xbb\x93\x38\xba\x8b\xa3\xc8\x37\x9a\x28\x02\xa5\xc8\xf2\x9f\x2d\x3f\x3c\x9e\x4a\x6d\xce\x70\x82\xfb\x52\x48\xb8\x2c\x29\xc7\xd3\xfd\x8f\x87\x09\x62\xe8\x65\xdd\x59\x8c\x1d\x5f\xb0\x08\xeb\x34\x8c\xa4\x6c\xbd\x0a\x07\x24\xdd\x59\x4d\x94\x03\x92\x60\x2e\x45\x51\x18\xb3\x41\xc8\x72\x44\xe7\x23\x98\x9f\x7b\xe8\x2a\x31\x92\xe1\x7f\xe7\xb7\x40\x9f\x1f\x72\x69\xa3\x18\x45\x2f\x8f\xce\x32\x72\x89\x11\x5b\xda\x3d\x82\xf9\x91\xcf\x94\x74\x45\xeb\x8c\x04\x23\x91\x50\xd3\xa6\xe5\x2e\xd6\x3d\xca\x17\xb2\xea\xb8\x1c\x3b\x68\xba\x37\xb4\x42\x56\x1c\x9c\xa1\xcf\xc8\x1a\x91\x03\xa5\x41\xbf\x6c\x05\xfa\x05\x33\xd3\x53\xf4\xe5\x42\xa5\x97\x47\x67\x83\x75\x8c\xa5\xf7\xd2\x9e\x2f\x37\x10\x83\x62\x5e\xfd\x01\xaa\xc7\x26\x56\xa7\xf7\x0e\x88\x60\x1c\x33\x3d\x8a\x2e\xc9\x41\x2f\xcb\x40\x61\x55\x82\xb2\x0e\x8d\xa4\xce\x8f\x6e\x98\x49\xf7\xf0\xed\xde\x71\x78\xaf\x1f\xc3\xad\x5c\x8c\x85\x61\x8e\xba\x08\xd9\xee\x7b\xdb\xda\xac\x1d\x51\x83\x2b\x48\x46\x92\xcf\xcf\x4f\x93\x8c\xac\x05\xf1\x3e\x8e\xee\x5d\xd1\x1d\x2a\xc0\x41\x88\x5d\x3b\xd5\x2d\x96\xe3\x60\x31\x6d\xe6\xf0\x53\xce\x49\xa7\x6d\xef\x46\x0c\x1f\xbe\x9c\x5c\x4c\xe1\x36\x23\x46\xca\x8c\x50\x05\x96\x51\x05\x2d\x88\x0a\x44\x69\x9b\xf1\x94\x1a\x32\x07\xd2\x52\x6d\x3b\x73\x29\x9b\x56\x0a\x10\xc6\x83\x90\xa7\x99\x42\x93\xc7\x8b\x52\xf0\x2d\xf6\x50\x76\x02\xd3\xde\xeb\x90\xdb\x77\x2c\x9b\x80\x70\x4a\x0d\x88\xf2\x76\x81\xf0\x9c\x69\x23\x6b\x45\x1b\xcc\x4b\xdf\xd5\x7d\x39\x6d\x43\x99\x30\xe0\xd5\x67\x70\xab\x1d\xca\x2f\x7f\xa5\x6d\xc7\x8c\x31\xaf\xd1\xcb\x45\x41\x9e\x74\x9a\x09\xd0\xda\x0f\xc9\xc0\xa5\x47\x7c\xb0\xa0\xbc\x4b\x70\xc3\x92\x15\xfa\xda\xd6\x6f\x72\xbf\x6e\xcd\x01\x59\xee\x61\x98\x9f\xde\xa6\x63\x25\x9b\xb4\xb7\xdb\x06\x6b\x7f\xd1\x1a\x6d\x43\x8e\x85\xa2\x5b\x5a\xc2\xfe\xa2\xc0\xb3\x70\xbe\xef\x2c\x48\xbc\xa8\xcb\x12\x69\x13\x0b\x7e\x0e\xbc\x0d\xe0\x51\xd7\x5c\x81\xc2\x69\xec\x11\x35\x51\x50\x02\x9b\x41\x95\x5b\xec\xfb\x8c\x2c\xec\x1a\x6c\xfa\x79\x5d\xf9\x71\xd7\x34\x54\xdd\x6e\x51\xde\x43\x7e\x94\xf2\xdc\x49\xbb\x6c\x58\xa9\xa4\xb6\xa3\x57\x6f\xda\x72\x21\x0d\xe5\x64\x11\xe5\x55\x9b\x98\x20\xab\xb4\xdb\x4c\x73\xd1\xbd\x50\x54\x68\x7b\x3b\xda\x08\xef\x82\xf1\xff\xc7\xe6\x20\xee\x52\x6c\x31\xf5\xdc\x6f\x1c\x0b\x9d\x98\x20\x82\x8a\x0d\xfb\xb6\xa5\xa1\xee\xca\x12\xd7\xc3\xfb\x01\x96\x79\x64\x3b\xfa\x53\x98\xd0\x8e\x1b\x5c\xd7\xe0\x45\x77\x93\x3f\xa7\xa2\xe2\x90\x26\x8b\xbb\x44\x46\xc2\xb5\xc7\xc3\x54\x3a\xf0\x83\xf9\x04\x73\x52\x75\x2d\xae\xeb\x16\x92\xc7\x38\xb8\x4a\xec\xd6\x0d\xbd\x86\xb4\x9c\x52\xe1\x86\xd7\x20\x8e\x6a\x49\x70\xd4\xbb\x29\x1f\xad\x21\x49\x9d\x8f\xed\x9d\xd2\x36\x7d\xfb\x94\x8f\xa4\x61\x93\xdb\xb4\xcc\x88\xbf\x64\xe6\xe3\x93\x67\x27\xa3\x8b\xde\xfb\xc5\xd1\xf9\x0b\xa4\xb1\x72\x3f\xd9\x25\x93\xc6\xe4\x47\x28\x71\x92\x26\x3f\x41\xed\x3f\xd9\x2d\xd1\xdc\x34\x8c\xe1\x2b\xaa\x59\xe9\xb7\x53\xb2\xbe\xa8\x86\x46\xe6\x0f\x5d\xe9\xf7\x28\x0e\x1e\xa4\x19\xc1\xfc\xc9\x0a\x66\xea\x5a\xf2\xe0\x87\x33\xf0\x7b\xce\x0b\x56\x55\x1c\xe6\x54\x2d\x58\xa4\xab\x0c\xde\x81\xe1\x89\xd0\x46\x75\x0d\x08\xd3\x67\xbb\xda\x84\x32\xd2\xaf\xeb\x0d\x61\x7e\x1e\xd8\xbb\x8b\x09\x35\x92\xaf\x87\x73\xb9\x92\x71\x59\xdb\x11\xe8\x95\xc7\xd9\x13\xa8\xc2\x1d\x28\xb1\x35\xc7\x85\x1b\xd2\xfb\x07\x44\x80\xc9\x4f\xed\x15\x26\x4d\x4c\xd9\xe2\x5c\x0a\x77\xab\x07\x26\x67\x08\x37\x28\xe5\x56\x16\xd3\x29\xe1\xc7\x64\xd8\x3f\x35\xb2\x5e\xf7\x4d\x00\x62\xb8\x7a\xa6\x66\x24\x28\x1c\x4a\x2b\xeb\xad\x6c\xa8\x08\xde\xeb\x7c\x11\x6c\xe3\xbd\x74\xcf\x08\xe6\xcf\xce\xcf\x0e\x6d\x55\xa9\x74\xa1\x50\x9f\x63\x90\x88\x9c\xaf\x29\x32\x5c\x7c\x23\xc8\x1d\xe5\x19\x55\xb4\x01\x03\x4a\xdf\xa1\x61\xd6\x20\xd4\xc1\xf6\x1e\xc7\xdb\xbe\x7e\x16\xe8\x2c\x81\x4e\xaf\xa9\xdd\x38\xd6\xf5\x6b\xaf\xf2\x73\xa8\xd1\xcf\xea\xee\xce\xc8\xcf\xdb\x16\xd4\x31\x53\xda\x1c\xd2\x06\xf8\x21\xd5\x40\xfa\x04\x5e\x86\xce\xc8\x8a\xe5\x36\x78\xeb\x3b\x87\xbf\x50\xf4\xc2\x16\x62\xa4\x9d\x35\x29\x17\x8b\x42\x2c\x0a\xe2\x2e\xb1\xee\xe2\x6a\x3b\xc7\x8f\x4c\x28\x77\x85\x45\x79\x0d\x62\x87\x35\x35\x34\x34\xbb\x7e\x36\xcb\xb6\x66\xd1\xdd\x17\xad\x22\x71\x37\x94\xd0\xd7\x8e\x51\xba\x85\xe4\x27\xa2\x82\x9b\xc1\x23\xa4\x65\x53\x71\x26\xe0\x61\x0e\x87\x0e\xe1\x31\x1e\xf8\x87\xf1\x47\x78\x9c\x39\x84\xc7\x78\xe8\xdb\xe6\x4a\xf2\x87\x59\x8c\x2d\xfc\x31\x0e\x76\x5b\x7c\x98\x81\x4d\xd5\x75\xfa\xb7\xcd\x86\x07\xd3\x63\xf1\xa9\x63\x35\x3f\x2c\xbd\x2b\xff\x4f\x45\xe5\x72\x65\x89\x99\x91\x66\x91\x36\x1b\x9b\x2e\xa8\x86\x09\x6a\xa0\xb2\x8d\x1e\x19\x0e\xe2\x7b\x7f\xa5\xec\xdd\x0d\x6d\x16\xb9\x17\x4c\x2f\x1c\x04\x3e\xc3\x96\x00\x7b\x7f\x74\x1f\x4d\x30\xed\xf0\x21\xff\x94\x73\x39\x3f\x11\x13\x89\x79\xa4\xe7\xcc\x94\x53\xb2\xb3\xf8\xb6\x72\x17\x47\x25\x56\x8d\x4f\xc2\x7d\x97\xb7\x0e\xd6\xe3\x60\xad\x41\x16\x0e\x9d\x89\x89\x7c\x04\x3b\xc8\x73\xc8\x73\xaa\xc4\x23\xc8\x5f\x50\x25\x96\xc8\x6e\xd3\x7c\x18\xdb\x8e\xc6\xd4\xcd\x7f\xef\x00\x57\x61\x23\x98\x9f\xca\x7a\xd2\x18\xef\x31\x1c\xc8\xa6\x92\x9d\x19\xac\x22\x5a\x46\x23\x98\x1f\x33\x8e\x57\xc0\x50\x91\x41\xd6\x60\x8d\x69\xbf\x6c\xf5\xac\xc4\x1c\xf0\xeb\x8f\xc3\xc5\x0b\xf2\xd8\xd0\xa6\x0d\x95\x8e\x07\x1a\x0f\x8e\xa5\x6a\xa8\x49\x7d\x4b\xb0\x9f\x5e\xec\x27\xbe\xbb\x38\xb4\x7b\x77\x38\x92\xf3\x74\x90\x9f\x88\xd4\xbe\x1d\xb3\x1b\xa8\xbe\x94\x02\xd2\xe4\x70\x7c\x91\x64\xe4\xa3\xe1\xce\x47\xc3\x9d\x8f\x31\x83\xef\x33\x92\xbc\x3f\x1c\x7e\xb4\x3b\xdc\xdb\x1d\xbe\x7f\xb1\xf7\xe1\xfe\xf0\x83\xfd\xe1\x87\xf9\xd0\xfe\x4b\x1e\x57\xde\x60\xb6\xaf\x2a\xfc\x38\x3a\xae\x27\xf6\x0e\x86\x20\xbf\x63\x1d\xda\xb3\x41\x1c\xd4\x77\xc8\xf1\x7d\xfc\xbf\x00\x00\x00\xff\xff\x05\xb1\xbc\xd2\xa4\x17\x00\x00"

func tmplMain_svcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMain_svcTmpl,
		"tmpl/main_svc.tmpl",
	)
}

func tmplMain_svcTmpl() (*asset, error) {
	bytes, err := tmplMain_svcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/main_svc.tmpl", size: 6052, mode: os.FileMode(438), modTime: time.Unix(1596617429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsAlias_typeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\x2a\xa9\x2c\x48\x55\xa8\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x85\xb0\x43\x2a\x0b\x52\xc1\x3a\x52\xf3\x52\x10\x34\x20\x00\x00\xff\xff\xa0\x3f\x01\xa9\x55\x00\x00\x00"

func tmplPartialsAlias_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsAlias_typeTmpl,
		"tmpl/partials/alias_type.tmpl",
	)
}

func tmplPartialsAlias_typeTmpl() (*asset, error) {
	bytes, err := tmplPartialsAlias_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/alias_type.tmpl", size: 85, mode: os.FileMode(438), modTime: time.Unix(1561361816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsConstantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x4d\xce\xcf\x2b\x2e\x51\xd0\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x2a\x65\x7a\x1e\x89\xc5\x61\x89\x39\xa5\xa9\xb5\xb5\xb6\x10\x69\x28\xaf\xba\x3a\x35\x2f\xa5\xb6\x16\x64\x26\x98\xa1\x09\x67\x01\x02\x00\x00\xff\xff\x10\xb6\xd9\xd5\x81\x00\x00\x00"

func tmplPartialsConstantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsConstantsTmpl,
		"tmpl/partials/constants.tmpl",
	)
}

func tmplPartialsConstantsTmpl() (*asset, error) {
	bytes, err := tmplPartialsConstantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/constants.tmpl", size: 129, mode: os.FileMode(438), modTime: time.Unix(1562060282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsEndpoint_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x6b\xc3\x30\x14\x84\xf7\x42\xff\xc3\x0d\x1e\x6c\x10\xa2\x73\x20\x53\xa0\x63\x87\x40\xbb\x16\xe1\xbe\x04\x81\x2a\xbb\x92\x6c\x02\x8f\xf7\xdf\x8b\x2c\xdb\xa4\xf6\x90\xa1\x5e\x8c\xc4\x71\xf7\xdd\xe9\xf9\x09\x00\x02\xa5\x21\x78\x5c\x06\xdf\xd6\x6d\xba\xa1\xed\x7c\xa2\x5b\xd2\xa7\xf2\x57\x00\xb3\xbd\xe0\x9a\x50\x3b\xf2\xd0\x67\xfa\x19\x28\x26\xfd\x61\x42\x6c\xf0\x22\x12\xca\x05\x33\xb9\x48\x22\x9f\xcc\xe4\xbf\x44\x60\x7d\xa2\x70\x31\x2d\xb1\x34\xa8\xef\x4e\x0a\x14\x42\x17\x1a\x70\x21\x58\xbe\xc7\x39\x38\x1c\x31\xc7\xe9\x9a\x79\xd5\xbc\x99\x6f\x12\x69\xb6\x76\x13\x07\x73\x30\xfe\x4a\xa8\xac\xaa\xc6\x6c\xa0\x4f\xc6\x39\xeb\xaf\xfa\x4c\x71\x70\x29\x66\x49\x35\xce\x1e\x13\x83\xef\x32\x84\x89\x09\x95\x45\xb5\xd5\x37\x22\x6a\xf5\x2e\x55\x0f\x47\xc4\xb1\xd5\xcc\xab\xb6\xb8\xe5\x41\xd5\x1e\xe0\xbe\x9a\x48\x6e\xa4\x1f\x20\xfc\x19\x63\x97\xbf\x29\x3e\xbf\xe8\xb4\x4f\xec\x3b\x1f\x69\x71\xc6\x8e\x65\xd7\x2e\x9b\xa6\xee\xbd\xef\x29\xbc\xda\x90\xf3\x17\xae\xc3\xbf\x67\x12\x05\x6f\x5d\x81\x95\xdf\x00\x00\x00\xff\xff\x32\x8c\x9b\xf7\x7e\x02\x00\x00"

func tmplPartialsEndpoint_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_funcTmpl,
		"tmpl/partials/endpoint_func.tmpl",
	)
}

func tmplPartialsEndpoint_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_func.tmpl", size: 638, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFuncTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x51\xca\x83\x40\x0c\x84\xdf\x05\xef\x30\xe4\x49\x5f\x96\xff\x0c\x7f\x6f\xd0\x0b\x88\x68\x2c\xc2\x1a\x5b\xcd\x3e\x94\x90\xbb\x97\xdd\x6d\x0b\x7d\x9b\x49\x86\x6f\xc6\x6c\x5d\x20\x8c\x70\xd9\xb7\x8d\x45\x41\xe4\x6e\xf6\xb1\x59\xb3\xcc\xee\x4b\x92\x09\x66\xca\xdb\x3d\x8e\xca\xa0\x55\x94\x8f\x65\x9c\x78\xc8\x2f\x42\x70\x87\xa1\xe2\x76\x45\xc7\x0f\x84\xff\x7d\x7e\x82\xa8\x2f\xc4\x6c\x0a\x2e\x9e\xec\xde\x36\x25\x7a\x53\x74\x91\x05\xe1\xca\x67\x8a\x7a\xf6\xf8\x73\x3f\x58\xd3\x21\x3f\x6d\xb9\x63\xa8\x77\xfa\x86\x2b\xa5\xcc\x03\xde\xa2\x6d\xfc\x15\x00\x00\xff\xff\xf4\xd8\xe7\x8c\xd3\x00\x00\x00"

func tmplPartialsFuncTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFuncTmpl,
		"tmpl/partials/func.tmpl",
	)
}

func tmplPartialsFuncTmpl() (*asset, error) {
	bytes, err := tmplPartialsFuncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func.tmpl", size: 211, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_parametersTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x25\x0a\x1a\x39\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\x05\x08\x00\x00\xff\xff\x15\x5b\x78\xe8\x50\x00\x00\x00"

func tmplPartialsFunc_parametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_parametersTmpl,
		"tmpl/partials/func_parameters.tmpl",
	)
}

func tmplPartialsFunc_parametersTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_parametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_parameters.tmpl", size: 80, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_resultsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xd5\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x20\xfd\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\xa5\x09\xa5\x01\x01\x00\x00\xff\xff\xcc\x6e\x26\x22\x6c\x00\x00\x00"

func tmplPartialsFunc_resultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_resultsTmpl,
		"tmpl/partials/func_results.tmpl",
	)
}

func tmplPartialsFunc_resultsTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_resultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_results.tmpl", size: 108, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_returnTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\x05\x31\x33\xd3\x14\xf2\xf2\x4b\x14\x34\x72\x12\x8b\x4b\x14\x54\x32\x15\x54\x34\x6b\x6b\x75\xaa\xab\x53\xf3\x52\x40\xb2\x60\x0a\x10\x00\x00\xff\xff\xbc\x66\xba\xd5\x44\x00\x00\x00"

func tmplPartialsFunc_returnTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_returnTmpl,
		"tmpl/partials/func_return.tmpl",
	)
}

func tmplPartialsFunc_returnTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_returnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_return.tmpl", size: 68, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsImportsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x50\xa9\xad\xcd\xcc\x2d\xc8\x2f\x2a\xd1\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x05\x49\x82\x15\xe5\xe5\x97\x28\x68\xa4\x16\x2a\xa8\x94\xe9\xf9\x25\xe6\xa6\x2a\x28\x29\x69\x82\x64\xa0\xdc\xda\x5a\x85\xea\xea\xd4\xbc\x14\xa8\x50\x48\x65\x41\x6a\x6d\x2d\xc8\x34\xb0\x18\x2f\x97\x26\x94\x05\x08\x00\x00\xff\xff\x47\x50\xa7\x81\x70\x00\x00\x00"

func tmplPartialsImportsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsImportsTmpl,
		"tmpl/partials/imports.tmpl",
	)
}

func tmplPartialsImportsTmpl() (*asset, error) {
	bytes, err := tmplPartialsImportsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/imports.tmpl", size: 112, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterfaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\xca\xc2\x30\x10\xc5\xf1\x7d\xa1\x77\x78\x84\x2c\x3f\x72\x80\x0f\x5c\xb9\xd6\x2b\x48\x68\x5f\x34\x60\xa6\xa5\x8e\x05\x19\xe6\xee\x12\x41\x77\xef\x2d\x7e\x7f\xb3\x5a\x20\x44\x3a\x2e\xad\x51\x14\x21\xb8\x9b\x7d\x6f\xdf\x94\xd9\x5d\x5f\x2b\x61\x96\xce\xb9\xd1\x1d\x55\x94\x5b\xc9\x13\x61\xe3\x60\xb6\x65\xb9\x12\xb1\xfe\xc5\x1d\xff\x07\xa4\x13\xf5\xb6\xcc\x8f\xae\x95\x6d\xbd\x67\x25\xc2\xcf\x5c\xca\x53\xa6\x80\xb8\xbb\x77\xfc\xe9\x8f\x83\xbf\x03\x00\x00\xff\xff\x55\x08\xe2\x86\x8b\x00\x00\x00"

func tmplPartialsInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterfaceTmpl,
		"tmpl/partials/interface.tmpl",
	)
}

func tmplPartialsInterfaceTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface.tmpl", size: 139, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x2b\xcd\x4b\x8e\x2f\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\x56\x52\xd0\x0b\x80\x73\x6a\x6b\x35\x31\x94\x16\xa5\x16\x97\xe6\x94\x80\xd4\x05\x41\x58\xb5\xb5\x80\x00\x00\x00\xff\xff\xc1\x2e\xd4\xb5\x59\x00\x00\x00"

func tmplPartialsInterface_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_funcTmpl,
		"tmpl/partials/interface_func.tmpl",
	)
}

func tmplPartialsInterface_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_func.tmpl", size: 89, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_stubTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x2e\x29\x2a\x4d\x2e\x51\x52\xd0\xab\xad\xe5\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\xd4\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x45\xd5\x55\x9a\x14\x9f\x56\x9a\x97\x5c\x92\x99\x9f\xa7\xa4\xa0\x52\x06\xd2\x0d\xd2\x9f\x9a\x97\x52\x5b\x0b\x08\x00\x00\xff\xff\xb3\x9e\x14\xdc\x60\x00\x00\x00"

func tmplPartialsInterface_stubTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_stubTmpl,
		"tmpl/partials/interface_stub.tmpl",
	)
}

func tmplPartialsInterface_stubTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_stubTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_stub.tmpl", size: 96, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStructTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xb1\x0a\xc2\x30\x18\x04\xe0\x5d\xf0\x1d\x8e\x92\x51\xf2\x00\x82\x93\xbb\x93\xb8\x07\xfd\x2d\x1d\x12\x4b\xfa\x5b\x28\xc7\xbd\xbb\x10\x09\xdd\xbe\x83\xbb\x23\xa7\x37\x8a\x21\x5e\x3f\x39\x5b\x71\x0c\x83\x44\xf6\x28\x1d\x0f\xa4\x95\x97\xe4\xdb\x6c\x20\xe3\x2d\x65\x93\xb0\x78\xfd\x3e\x1d\x04\x59\x53\x19\x0d\x61\x3a\x85\x15\xe7\x0b\xe2\x23\xd5\xe5\x3f\x0c\x6b\xaf\x37\xdf\xb7\x79\x77\x1a\x1b\xdb\x37\xf4\x0b\x00\x00\xff\xff\x55\xe9\x71\x95\x88\x00\x00\x00"

func tmplPartialsStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStructTmpl,
		"tmpl/partials/struct.tmpl",
	)
}

func tmplPartialsStructTmpl() (*asset, error) {
	bytes, err := tmplPartialsStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct.tmpl", size: 136, mode: os.FileMode(438), modTime: time.Unix(1566802589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStruct_functionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcf\xcd\x4a\xc7\x30\x10\x04\xf0\xbb\xe0\x3b\x0c\x39\xb5\x97\xe0\x33\xe8\xdd\x83\x7a\x2f\xa5\xdd\x48\x21\x49\x6b\xba\x39\x94\x65\xde\x5d\x62\xfd\x7f\x9d\x92\x19\x76\xf9\xb1\x66\x4b\x40\x16\xf8\xb7\x35\x25\xc9\x0a\xe7\x48\xb3\x4b\x24\x9f\x9f\xcc\x24\xcf\x64\xa8\x79\x42\x67\xe6\x3f\xb5\xd4\x49\xfd\xfb\x98\x84\xc4\xad\xf8\x3a\x36\x21\x7b\x98\xa9\xa4\x2d\x8e\x2a\x70\x4b\x56\x29\x61\x9c\x64\x68\xeb\x0e\x9e\x34\x9c\xe6\xaa\xe8\xe4\x07\xfe\x75\x9d\x0f\x38\xd7\xff\xb1\x2d\xb4\x8f\xc4\x5d\x4e\x7b\x09\xf8\x56\x74\x51\x32\xfc\x87\xec\x35\xea\xde\xe3\x85\x2c\xa2\xb5\xe4\x07\xac\x11\xc3\xd9\xbb\xeb\xf0\xdd\x05\xff\x0f\xf8\x1b\x00\x00\xff\xff\x25\x63\x5f\x34\xf5\x00\x00\x00"

func tmplPartialsStruct_functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_functionTmpl,
		"tmpl/partials/struct_function.tmpl",
	)
}

func tmplPartialsStruct_functionTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_function.tmpl", size: 245, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsVarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x2d\x4b\x2c\x52\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\x78\xb9\x34\xa1\x2c\x40\x00\x00\x00\xff\xff\x51\x62\x20\x15\x7e\x00\x00\x00"

func tmplPartialsVarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsVarsTmpl,
		"tmpl/partials/vars.tmpl",
	)
}

func tmplPartialsVarsTmpl() (*asset, error) {
	bytes, err := tmplPartialsVarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/vars.tmpl", size: 126, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProtoPbTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\xfb\x30\x0c\xc5\xef\x85\x7e\x07\x51\x0c\xfd\x17\x42\x2e\xff\xdb\x4a\x4e\x85\xc1\x0e\xdd\xc6\x3a\x7a\x19\x3b\x98\x54\xeb\x42\x1b\x3b\xb3\xdc\xd0\x20\xf4\xdd\x47\xec\x2c\x75\xb7\x9e\x22\xc5\x4f\xef\xfd\x64\x53\x67\xbc\x3e\x43\x01\xb3\xc6\x59\x6f\xff\xcf\x96\xd3\xc9\x74\xd2\xe8\xf2\xa0\xf7\x08\xcc\xde\x6e\x8c\x3e\xe0\x4a\x13\x42\xfe\x1c\x7f\x3f\xea\x1a\x45\x82\x90\xd9\x69\xb3\x47\x50\x75\xa6\x0c\xdc\x15\x90\x3f\xd4\x8d\x75\x9e\x44\xaa\x50\xc0\x8c\x59\x99\xfc\xbe\x3a\xa2\x09\x63\x7d\x00\x33\x9a\x9d\xc8\x6d\x83\xa7\xc6\x57\xd6\x90\x88\x0d\x05\x84\xf9\x18\x09\x45\xec\x56\xd6\x90\xd7\xc6\xe7\x1b\x7b\x72\x65\x64\x49\x3c\x09\x5d\x5b\x95\x3d\x7d\xbe\x89\xe5\x30\xce\x49\x5e\x95\xa9\x36\xe4\xad\xd1\x7f\xda\x1d\x89\x00\x00\xb8\xa6\xec\x23\xda\x9f\xc0\x7f\x49\xf3\x82\x5f\x0b\x70\xe8\x4f\xce\xd0\xaf\x03\x5a\x00\xcb\xc8\x10\x20\x6e\xad\xb6\x46\x22\xbd\x47\xea\x15\x75\xac\xaf\xd6\x4b\xf9\x0e\x03\x9f\x32\xf9\x56\xbb\x01\x2f\xb2\xbd\x76\x4d\x50\x27\x9c\x45\xec\xb6\xfa\x78\x42\x11\xe6\xea\x03\x54\x7b\xb9\xca\xb7\xd1\xf6\x9c\xa9\x2e\xd8\x26\xa7\x51\x7e\x16\xc9\x60\xd8\x80\x59\x75\x17\xeb\x79\x68\xff\x5c\xfa\x7c\x10\xbf\x0f\xdf\xe5\xf8\x04\x72\xf5\x1c\xdf\x01\x00\x00\xff\xff\x19\x19\x06\x4e\x63\x02\x00\x00"

func tmplProtoPbTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProtoPbTmpl,
		"tmpl/proto.pb.tmpl",
	)
}

func tmplProtoPbTmpl() (*asset, error) {
	bytes, err := tmplProtoPbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto.pb.tmpl", size: 611, mode: os.FileMode(438), modTime: time.Unix(1575956779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\xb1\x6a\x03\x31\x0c\x86\xf7\x40\xde\x41\x2f\x60\x7b\xe8\x66\xc8\x5c\xba\x74\x29\x9d\x8b\xee\xa2\x2a\x06\x9f\x65\x2c\xb9\x14\x42\xde\xbd\x44\x3d\x28\x85\x2e\x5d\x8c\x11\xdf\xff\xc1\x97\x33\x3c\x35\x35\xac\x15\xfa\x10\x93\x87\x78\x3c\xe4\x0c\x17\xb3\xae\x39\x25\x2e\x76\x99\x4b\x5c\x65\x4b\x2c\xc2\x95\x92\x53\xcb\x7c\x4f\x83\x2a\xa1\x92\x3a\xff\xda\xcf\x68\xf4\xad\x58\xe1\x51\x60\x29\xed\x5c\x1a\x2b\x7c\x14\x74\x02\x58\x80\xc9\x20\x4c\xf8\x25\xad\xd8\xf8\x47\xea\x9f\xff\xf2\x6b\x60\x6a\x81\x7d\xe7\xdb\x17\x22\xc0\xaa\xbb\xe8\xaf\x96\xd1\x57\x7f\x02\x4b\xb2\x41\x94\x36\x54\xa3\x91\xe8\x13\xb7\x5e\xef\x51\xc7\xc3\x1e\x73\xbd\xc6\x67\xdc\xe8\x76\x8b\x7e\x80\x10\x58\xde\x64\xda\xa9\xd7\xc9\xa5\xe9\xe9\xee\xc9\xf1\x2b\x00\x00\xff\xff\x7e\x97\x17\x88\x49\x01\x00\x00"

func tmplProto_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileBatTmpl,
		"tmpl/proto_compile.bat.tmpl",
	)
}

func tmplProto_compileBatTmpl() (*asset, error) {
	bytes, err := tmplProto_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.bat.tmpl", size: 329, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x6b\xf3\x30\x10\x86\xf7\x40\xfe\xc3\x7d\x64\xfd\xac\x1b\xba\x25\x64\x2e\x5d\xda\x21\x74\x2e\xb2\x72\x39\x8b\x4a\x3a\x23\x9d\xd2\x96\x90\xff\x5e\x24\x9b\x42\xa1\x8b\x7d\x88\xf7\x9e\xf7\x91\x76\xff\xb0\x96\x8c\xa3\x4f\x48\xe9\x0a\x65\xda\x6e\xb6\x9b\x1d\x3c\xa5\xa2\x36\x04\x98\xb3\xa8\x3c\xc0\x25\x4b\x84\x22\x35\x3b\x82\x68\xdd\xcb\x09\x24\x85\x2f\xd3\x92\x30\x66\xfa\x00\xbf\xe6\x6d\x55\x71\x92\x2e\x7d\x88\xf6\x9d\x20\xf8\x51\x45\x42\x8f\xb2\x57\x70\x41\x12\xc1\xa4\x3a\x97\x3d\x22\x7b\x9d\xea\x68\x9c\x44\x64\x11\x0e\x84\xbd\x71\xac\x97\xbe\x60\xb0\x71\x98\x92\x29\x13\x1c\xc0\x60\x63\x7b\xae\x99\xe0\x00\x1d\xbf\xfe\xd6\xfe\xed\x66\xd7\xf6\x5e\xe7\xb3\x55\x5a\xe4\x1d\x3c\x0a\x8c\x3e\x9d\x7d\xe2\x02\x57\x6f\x17\x13\x01\x26\x85\xa1\xc2\x2f\x83\x60\x13\xff\x18\xe0\xad\x4f\xff\x17\xcc\xc0\x94\x06\x96\xfb\x5a\x71\x22\x02\x1b\x8a\x74\xda\x5f\xb7\xc9\xb3\xeb\x9f\x81\x05\x35\x13\x61\xb4\x45\x29\x23\x7d\xda\x38\x07\x2a\xed\x9d\x57\xc1\xdb\xcd\x3c\xdb\x48\xf7\xbb\xe9\x07\x30\x0c\x2c\x6f\x52\xf5\x38\x87\xca\x3e\x95\x63\xe3\xec\xcd\x77\x00\x00\x00\xff\xff\x44\x50\x25\xa7\xab\x01\x00\x00"

func tmplProto_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileShTmpl,
		"tmpl/proto_compile.sh.tmpl",
	)
}

func tmplProto_compileShTmpl() (*asset, error) {
	bytes, err := tmplProto_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.sh.tmpl", size: 427, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplSvcThriftTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x2d\x2e\x29\x2a\x4d\x2e\x51\xa8\xae\x56\x29\xd3\x0b\x4a\x2d\xc8\xa9\xac\xad\xad\xe6\xe5\xaa\xe5\xe5\x42\x95\x28\x2c\x4d\x2d\x2e\x81\x48\x55\x57\xa7\xe6\xa5\xd4\xd6\xf2\x72\xf1\x72\x15\xa7\x16\x95\x65\x26\xa7\x2a\x54\x57\xeb\xf9\x25\xe6\xa6\xd6\xd6\x06\xc3\x04\x78\xb9\xf0\xd8\x89\x62\x1b\x84\x03\xd1\xae\xa0\x61\x68\x85\x66\xa3\x42\x51\x6a\xa1\x26\xc8\x34\xb0\xa5\x60\x5b\x01\x01\x00\x00\xff\xff\xd6\xd0\xa5\x28\xce\x00\x00\x00"

func tmplSvcThriftTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplSvcThriftTmpl,
		"tmpl/svc.thrift.tmpl",
	)
}

func tmplSvcThriftTmpl() (*asset, error) {
	bytes, err := tmplSvcThriftTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/svc.thrift.tmpl", size: 206, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\x41\x8a\xc4\x20\x10\x45\xf7\x81\xdc\x41\xb2\x1e\xad\xbd\x90\x03\xcc\x66\x98\x1b\x84\x4a\x62\x4a\x69\x63\x89\xa9\xa6\x1b\xc4\xbb\x37\x8d\xe1\xaf\xfe\xe3\x7f\x9e\xb5\xea\x37\x5d\x82\x31\x2a\xf1\x25\x1c\xa2\xac\xf2\x22\xf9\xb2\x00\x1d\x18\xcc\xb8\x79\x67\xb8\x10\xec\xfc\x4a\x91\x71\x1f\x87\x7b\xac\x8b\xd2\x9a\x5c\x52\x13\xb1\xcd\xb8\x3d\x90\xdc\x92\x8b\x3b\xc2\x7b\xae\xd5\xfc\x77\xd2\x1a\x90\x4b\x9a\x18\x7e\xfa\x6f\x09\x67\xe6\x22\x33\x05\xf1\xcf\xd5\x6c\x7c\x42\xb7\xdc\x4e\x88\x61\x05\xe2\xbb\x4d\xaa\x56\xf3\x87\xa7\x6b\xcd\x74\x32\x0e\xdf\x7c\x02\x00\x00\xff\xff\x1d\x60\x4b\xe4\xbc\x00\x00\x00"

func tmplThrift_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileBatTmpl,
		"tmpl/thrift_compile.bat.tmpl",
	)
}

func tmplThrift_compileBatTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.bat.tmpl", size: 188, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\xc3\x30\x0c\x85\xef\x85\xfe\x07\xd1\x5e\x17\x9b\x6d\xb7\x40\xaf\x83\x5d\xb6\xfd\x83\x62\xa7\xaa\x22\xe6\x58\xc6\x56\xd7\x42\xc8\x7f\x1f\x99\xbd\x4b\xd0\x49\xfa\x9e\xde\x7b\x47\x78\x8f\x45\x5d\x08\xa0\x63\xe6\xab\xc2\xe4\x86\xcf\x62\xf6\xbb\x23\x3c\x1b\xf0\x19\xef\xc0\x4d\xe0\x45\x8a\xae\xe0\x65\x03\x02\x7b\xfc\xc1\xf8\xc7\x5e\x37\xac\xba\xae\xe4\x4d\x32\x04\x8e\xb7\x07\x14\x44\xe8\x61\x54\x4d\xa5\xb7\xb6\x2a\x8c\x4b\x6e\x18\xd1\x48\x26\x7b\x91\x7b\x0c\xe2\x2e\xfb\x5d\xeb\xd4\x65\xe8\x3a\xc2\x08\x07\x92\x3e\xb9\xe1\xdb\x11\x9e\x53\xc6\x2b\x3f\x4e\xf3\x6c\xbe\xea\x65\x59\x2c\x61\xec\x48\xec\x53\xfd\x3b\xf3\x94\x24\xeb\x89\x58\xc7\x9b\x37\x83\x4c\xb6\xa6\xb4\x4c\x1b\xd8\x5b\x92\xb6\x1d\x60\x9e\xcd\x87\x9b\x70\x59\xcc\x7f\xeb\x75\x7e\x03\x00\x00\xff\xff\x44\x38\x4f\x96\x22\x01\x00\x00"

func tmplThrift_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileShTmpl,
		"tmpl/thrift_compile.sh.tmpl",
	)
}

func tmplThrift_compileShTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.sh.tmpl", size: 290, mode: os.FileMode(438), modTime: time.Unix(1560931698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/file.tmpl":                     tmplFileTmpl,
	"tmpl/gk.json.tmpl":                  tmplGkJsonTmpl,
	"tmpl/main_api.tmpl":                 tmplMain_apiTmpl,
	"tmpl/main_svc.tmpl":                 tmplMain_svcTmpl,
	"tmpl/partials/alias_type.tmpl":      tmplPartialsAlias_typeTmpl,
	"tmpl/partials/constants.tmpl":       tmplPartialsConstantsTmpl,
	"tmpl/partials/endpoint_func.tmpl":   tmplPartialsEndpoint_funcTmpl,
	"tmpl/partials/func.tmpl":            tmplPartialsFuncTmpl,
	"tmpl/partials/func_parameters.tmpl": tmplPartialsFunc_parametersTmpl,
	"tmpl/partials/func_results.tmpl":    tmplPartialsFunc_resultsTmpl,
	"tmpl/partials/func_return.tmpl":     tmplPartialsFunc_returnTmpl,
	"tmpl/partials/imports.tmpl":         tmplPartialsImportsTmpl,
	"tmpl/partials/interface.tmpl":       tmplPartialsInterfaceTmpl,
	"tmpl/partials/interface_func.tmpl":  tmplPartialsInterface_funcTmpl,
	"tmpl/partials/interface_stub.tmpl":  tmplPartialsInterface_stubTmpl,
	"tmpl/partials/struct.tmpl":          tmplPartialsStructTmpl,
	"tmpl/partials/struct_function.tmpl": tmplPartialsStruct_functionTmpl,
	"tmpl/partials/vars.tmpl":            tmplPartialsVarsTmpl,
	"tmpl/proto.pb.tmpl":                 tmplProtoPbTmpl,
	"tmpl/proto_compile.bat.tmpl":        tmplProto_compileBatTmpl,
	"tmpl/proto_compile.sh.tmpl":         tmplProto_compileShTmpl,
	"tmpl/svc.thrift.tmpl":               tmplSvcThriftTmpl,
	"tmpl/thrift_compile.bat.tmpl":       tmplThrift_compileBatTmpl,
	"tmpl/thrift_compile.sh.tmpl":        tmplThrift_compileShTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"file.tmpl":     &bintree{tmplFileTmpl, map[string]*bintree{}},
		"gk.json.tmpl":  &bintree{tmplGkJsonTmpl, map[string]*bintree{}},
		"main_api.tmpl": &bintree{tmplMain_apiTmpl, map[string]*bintree{}},
		"main_svc.tmpl": &bintree{tmplMain_svcTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"alias_type.tmpl":      &bintree{tmplPartialsAlias_typeTmpl, map[string]*bintree{}},
			"constants.tmpl":       &bintree{tmplPartialsConstantsTmpl, map[string]*bintree{}},
			"endpoint_func.tmpl":   &bintree{tmplPartialsEndpoint_funcTmpl, map[string]*bintree{}},
			"func.tmpl":            &bintree{tmplPartialsFuncTmpl, map[string]*bintree{}},
			"func_parameters.tmpl": &bintree{tmplPartialsFunc_parametersTmpl, map[string]*bintree{}},
			"func_results.tmpl":    &bintree{tmplPartialsFunc_resultsTmpl, map[string]*bintree{}},
			"func_return.tmpl":     &bintree{tmplPartialsFunc_returnTmpl, map[string]*bintree{}},
			"imports.tmpl":         &bintree{tmplPartialsImportsTmpl, map[string]*bintree{}},
			"interface.tmpl":       &bintree{tmplPartialsInterfaceTmpl, map[string]*bintree{}},
			"interface_func.tmpl":  &bintree{tmplPartialsInterface_funcTmpl, map[string]*bintree{}},
			"interface_stub.tmpl":  &bintree{tmplPartialsInterface_stubTmpl, map[string]*bintree{}},
			"struct.tmpl":          &bintree{tmplPartialsStructTmpl, map[string]*bintree{}},
			"struct_function.tmpl": &bintree{tmplPartialsStruct_functionTmpl, map[string]*bintree{}},
			"vars.tmpl":            &bintree{tmplPartialsVarsTmpl, map[string]*bintree{}},
		}},
		"proto.pb.tmpl":           &bintree{tmplProtoPbTmpl, map[string]*bintree{}},
		"proto_compile.bat.tmpl":  &bintree{tmplProto_compileBatTmpl, map[string]*bintree{}},
		"proto_compile.sh.tmpl":   &bintree{tmplProto_compileShTmpl, map[string]*bintree{}},
		"svc.thrift.tmpl":         &bintree{tmplSvcThriftTmpl, map[string]*bintree{}},
		"thrift_compile.bat.tmpl": &bintree{tmplThrift_compileBatTmpl, map[string]*bintree{}},
		"thrift_compile.sh.tmpl":  &bintree{tmplThrift_compileShTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
